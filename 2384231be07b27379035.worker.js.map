{"version":3,"sources":["../webpack/bootstrap","../node_modules/process/browser.js","mpqcmp/MpqCmp.jscc","mpqcmp/mpqcmp.worker.js","../node_modules/path-browserify/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","cachedSetTimeout","cachedClearTimeout","process","defaultSetTimout","Error","defaultClearTimeout","runTimeout","fun","setTimeout","e","this","clearTimeout","currentQueue","queue","draining","queueIndex","cleanUpNextTick","length","concat","drainQueue","timeout","len","run","marker","runClearTimeout","Item","array","noop","nextTick","args","Array","arguments","push","apply","title","browser","env","argv","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask","MpqCmp","_scriptDir","document","currentScript","src","undefined","Module","moduleOverrides","status","toThrow","ENVIRONMENT_IS_NODE","ENVIRONMENT_IS_SHELL","ENVIRONMENT_IS_WEB","ENVIRONMENT_IS_WORKER","window","importScripts","nodeFS","nodePath","scriptDirectory","locateFile","path","__dirname","filename","binary","ret","toString","buffer","Uint8Array","assert","replace","slice","ex","ExitStatus","reason","read","f","data","readbuffer","scriptArgs","quit","self","location","href","indexOf","split","join","url","xhr","XMLHttpRequest","open","send","responseText","responseType","response","onload","onerror","out","console","log","print","err","printErr","warn","STACK_ALIGN","staticAlloc","size","STATICTOP","alignMemory","factor","Math","ceil","asm2wasmImports","f64-rem","x","y","debugger","ABORT","condition","text","abort","Pointer_stringify","ptr","hasUtf","HEAPU8","curr","String","fromCharCode","subarray","min","u8Array","idx","endPtr","UTF8Decoder","decode","u0","u1","u2","u3","u4","u5","str","ch","UTF8ArrayToString","UTF8ToString","TextDecoder","HEAP8","HEAP32","STACK_BASE","STACKTOP","STACK_MAX","DYNAMIC_BASE","DYNAMICTOP_PTR","WASM_PAGE_SIZE","ASMJS_PAGE_SIZE","MIN_TOTAL_MEMORY","alignUp","multiple","updateGlobalBuffer","buf","updateGlobalBufferViews","Int8Array","Int16Array","Int32Array","Uint16Array","Uint32Array","Float32Array","Float64Array","enlargeMemory","PAGE_MULTIPLE","LIMIT","OLD_TOTAL_MEMORY","TOTAL_MEMORY","max","replacement","byteLength","ArrayBuffer","transfer","oldHEAP8","set","_emscripten_replace_memory","Function","getOwnPropertyDescriptor","TOTAL_STACK","callRuntimeCallbacks","callbacks","callback","shift","func","arg","WebAssembly","Memory","initial","__ATPRERUN__","__ATINIT__","__ATMAIN__","__ATPOSTRUN__","runtimeInitialized","addOnPostRun","cb","unshift","abs","cos","sin","tan","acos","asin","atan","atan2","exp","sqrt","floor","pow","imul","fround","round","clz32","trunc","runDependencies","runDependencyWatcher","dependenciesFulfilled","dataURIPrefix","isDataURI","startsWith","wasmTextFile","wasmBinaryFile","asmjsCodeFile","info","global","asm2wasm","parent","getBinary","doNativeWasm","providedBuffer","receiveInstance","instance","memory","newBuffer","oldBuffer","oldView","mergeMemory","id","clearInterval","removeRunDependency","NaN","Infinity","receiveInstantiatedSource","output","instantiateArrayBuffer","receiver","fetch","Promise","resolve","reject","credentials","then","catch","instantiate","instantiateStreaming","asmjsReallocBuffer","finalMethod","oldSize","grow","wasmReallocBuffer","TABLE_SIZE","MAX_TABLE_SIZE","Table","maximum","element","integrateWasmJS","STATIC_BASE","tempDoublePtr","___cxa_free_exception","_free","__ZSt18uncaught_exceptionv","uncaught_exception","EXCEPTIONS","last","caught","infos","deAdjust","adjusted","addRef","refcount","decRef","rethrown","destructor","clearRef","___cxa_find_matching_catch","thrown","setTempRet0","throwntype","type","typeArray","_malloc","_llvm_exp2_f32","asmGlobalArg","asmLibraryArg","getTotalMemory","abortOnCannotGrowMemory","invoke_ii","index","a1","sp","stackSave","stackRestore","invoke_iii","a2","invoke_iiii","a3","invoke_iiiii","a4","invoke_iiiiii","a5","invoke_iiiiiii","a6","invoke_ji","invoke_v","invoke_vi","invoke_vii","invoke_viii","invoke_viiii","invoke_viiiii","invoke_viiiiii","invoke_viji","___assert_fail","line","___cxa_allocate_exception","___cxa_find_matching_catch_2","___cxa_throw","___gxx_personality_v0","___resumeException","___setErrNo","_abort","_do_error","end","DApi","exit_error","_do_progress","done","total","progress","_emscripten_memcpy_big","dest","num","_get_file_contents","offset","get_file_contents","_llvm_exp2_f64","_put_file_contents","put_file_contents","_put_file_size","put_file_size","asm","message","old","constructor","doRun","postRun","preRun","runCaller","what","JSON","stringify","pop","__webpack_exports__","_MpqCmp_jscc__WEBPACK_IMPORTED_MODULE_0__","_MpqCmp_jscc__WEBPACK_IMPORTED_MODULE_0___default","worker","input_file","input_offset","output_file","last_progress","error","performance","now","postMessage","action","addEventListener","_ref2","async","_ref","mpq","input","blockSize","wasm","MpqModule","wasmBinary","ready","count","_DApi_Alloc","HEAPU32","dst","_DApi_Compress","_ref3","blocks","stack","normalizeArray","parts","allowAboveRoot","up","splice","filter","xs","res","resolvedPath","resolvedAbsolute","TypeError","charAt","normalize","isAbsolute","trailingSlash","substr","paths","relative","from","to","trim","arr","start","fromParts","toParts","samePartsLength","outputParts","sep","delimiter","dirname","code","charCodeAt","hasRoot","matchedSlash","basename","ext","extname","startDot","startPart","preDotState"],"mappings":"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","file":"2384231be07b27379035.worker.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"./\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\nfunction defaultSetTimout() {\n  throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout() {\n  throw new Error('clearTimeout has not been defined');\n}\n(function () {\n  try {\n    if (typeof setTimeout === 'function') {\n      cachedSetTimeout = setTimeout;\n    } else {\n      cachedSetTimeout = defaultSetTimout;\n    }\n  } catch (e) {\n    cachedSetTimeout = defaultSetTimout;\n  }\n  try {\n    if (typeof clearTimeout === 'function') {\n      cachedClearTimeout = clearTimeout;\n    } else {\n      cachedClearTimeout = defaultClearTimeout;\n    }\n  } catch (e) {\n    cachedClearTimeout = defaultClearTimeout;\n  }\n})();\nfunction runTimeout(fun) {\n  if (cachedSetTimeout === setTimeout) {\n    //normal enviroments in sane situations\n    return setTimeout(fun, 0);\n  }\n  // if setTimeout wasn't available but was latter defined\n  if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n    cachedSetTimeout = setTimeout;\n    return setTimeout(fun, 0);\n  }\n  try {\n    // when when somebody has screwed with setTimeout but no I.E. maddness\n    return cachedSetTimeout(fun, 0);\n  } catch (e) {\n    try {\n      // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n      return cachedSetTimeout.call(null, fun, 0);\n    } catch (e) {\n      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n      return cachedSetTimeout.call(this, fun, 0);\n    }\n  }\n}\nfunction runClearTimeout(marker) {\n  if (cachedClearTimeout === clearTimeout) {\n    //normal enviroments in sane situations\n    return clearTimeout(marker);\n  }\n  // if clearTimeout wasn't available but was latter defined\n  if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n    cachedClearTimeout = clearTimeout;\n    return clearTimeout(marker);\n  }\n  try {\n    // when when somebody has screwed with setTimeout but no I.E. maddness\n    return cachedClearTimeout(marker);\n  } catch (e) {\n    try {\n      // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n      return cachedClearTimeout.call(null, marker);\n    } catch (e) {\n      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n      // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n      return cachedClearTimeout.call(this, marker);\n    }\n  }\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\nfunction cleanUpNextTick() {\n  if (!draining || !currentQueue) {\n    return;\n  }\n  draining = false;\n  if (currentQueue.length) {\n    queue = currentQueue.concat(queue);\n  } else {\n    queueIndex = -1;\n  }\n  if (queue.length) {\n    drainQueue();\n  }\n}\nfunction drainQueue() {\n  if (draining) {\n    return;\n  }\n  var timeout = runTimeout(cleanUpNextTick);\n  draining = true;\n  var len = queue.length;\n  while (len) {\n    currentQueue = queue;\n    queue = [];\n    while (++queueIndex < len) {\n      if (currentQueue) {\n        currentQueue[queueIndex].run();\n      }\n    }\n    queueIndex = -1;\n    len = queue.length;\n  }\n  currentQueue = null;\n  draining = false;\n  runClearTimeout(timeout);\n}\nprocess.nextTick = function (fun) {\n  var args = new Array(arguments.length - 1);\n  if (arguments.length > 1) {\n    for (var i = 1; i < arguments.length; i++) {\n      args[i - 1] = arguments[i];\n    }\n  }\n  queue.push(new Item(fun, args));\n  if (queue.length === 1 && !draining) {\n    runTimeout(drainQueue);\n  }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n  this.fun = fun;\n  this.array = array;\n}\nItem.prototype.run = function () {\n  this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\nfunction noop() {}\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\nprocess.listeners = function (name) {\n  return [];\n};\nprocess.binding = function (name) {\n  throw new Error('process.binding is not supported');\n};\nprocess.cwd = function () {\n  return '/';\n};\nprocess.chdir = function (dir) {\n  throw new Error('process.chdir is not supported');\n};\nprocess.umask = function () {\n  return 0;\n};","\r\nvar MpqCmp = (function() {\r\n  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;\r\n  return (\r\nfunction(MpqCmp) {\r\n  MpqCmp = MpqCmp || {};\r\n\r\n// The Module object: Our interface to the outside world. We import\r\n// and export values on it. There are various ways Module can be used:\r\n// 1. Not defined. We create it here\r\n// 2. A function parameter, function(Module) { ..generated code.. }\r\n// 3. pre-run appended it, var Module = {}; ..generated code..\r\n// 4. External script tag defines var Module.\r\n// We need to check if Module already exists (e.g. case 3 above).\r\n// Substitution will be replaced with actual code on later stage of the build,\r\n// this way Closure Compiler will not mangle it (e.g. case 4. above).\r\n// Note that if you want to run closure, and also to use Module\r\n// after the generated code, you will need to define   var Module = {};\r\n// before the code. Then that object will be used in the code, and you\r\n// can continue to use Module afterwards as well.\r\nvar Module = typeof MpqCmp !== 'undefined' ? MpqCmp : {};\r\n\r\n// --pre-jses are emitted after the Module integration code, so that they can\r\n// refer to Module (if they choose; they can also define Module)\r\n\r\n\r\n// Sometimes an existing Module object exists with properties\r\n// meant to overwrite the default module functionality. Here\r\n// we collect those properties and reapply _after_ we configure\r\n// the current environment's defaults to avoid having to be so\r\n// defensive during initialization.\r\nvar moduleOverrides = {};\r\nvar key;\r\nfor (key in Module) {\r\n  if (Module.hasOwnProperty(key)) {\r\n    moduleOverrides[key] = Module[key];\r\n  }\r\n}\r\n\r\nModule['arguments'] = [];\r\nModule['thisProgram'] = './this.program';\r\nModule['quit'] = function(status, toThrow) {\r\n  throw toThrow;\r\n};\r\nModule['preRun'] = [];\r\nModule['postRun'] = [];\r\n\r\n// The environment setup code below is customized to use Module.\r\n// *** Environment setup code ***\r\n\r\nvar ENVIRONMENT_IS_WEB = false;\r\nvar ENVIRONMENT_IS_WORKER = false;\r\nvar ENVIRONMENT_IS_NODE = false;\r\nvar ENVIRONMENT_IS_SHELL = false;\r\nENVIRONMENT_IS_WEB = typeof window === 'object';\r\nENVIRONMENT_IS_WORKER = typeof importScripts === 'function';\r\nENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;\r\nENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;\r\n\r\n\r\n// Three configurations we can be running in:\r\n// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)\r\n// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)\r\n// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)\r\n\r\n\r\n// `/` should be present at the end if `scriptDirectory` is not empty\r\nvar scriptDirectory = '';\r\nfunction locateFile(path) {\r\n  if (Module['locateFile']) {\r\n    return Module['locateFile'](path, scriptDirectory);\r\n  } else {\r\n    return scriptDirectory + path;\r\n  }\r\n}\r\n\r\nif (ENVIRONMENT_IS_NODE) {\r\n  scriptDirectory = __dirname + '/';\r\n\r\n  // Expose functionality in the same simple way that the shells work\r\n  // Note that we pollute the global namespace here, otherwise we break in node\r\n  var nodeFS;\r\n  var nodePath;\r\n\r\n  Module['read'] = function shell_read(filename, binary) {\r\n    var ret;\r\n      if (!nodeFS) nodeFS = require('fs');\r\n      if (!nodePath) nodePath = require('path');\r\n      filename = nodePath['normalize'](filename);\r\n      ret = nodeFS['readFileSync'](filename);\r\n    return binary ? ret : ret.toString();\r\n  };\r\n\r\n  Module['readBinary'] = function readBinary(filename) {\r\n    var ret = Module['read'](filename, true);\r\n    if (!ret.buffer) {\r\n      ret = new Uint8Array(ret);\r\n    }\r\n    assert(ret.buffer);\r\n    return ret;\r\n  };\r\n\r\n  if (process['argv'].length > 1) {\r\n    Module['thisProgram'] = process['argv'][1].replace(/\\\\/g, '/');\r\n  }\r\n\r\n  Module['arguments'] = process['argv'].slice(2);\r\n\r\n  // MODULARIZE will export the module in the proper place outside, we don't need to export here\r\n\r\n  process['on']('uncaughtException', function(ex) {\r\n    // suppress ExitStatus exceptions from showing an error\r\n    if (!(ex instanceof ExitStatus)) {\r\n      throw ex;\r\n    }\r\n  });\r\n  // Currently node will swallow unhandled rejections, but this behavior is\r\n  // deprecated, and in the future it will exit with error status.\r\n  process['on']('unhandledRejection', function(reason, p) {\r\n    process['exit'](1);\r\n  });\r\n\r\n  Module['quit'] = function(status) {\r\n    process['exit'](status);\r\n  };\r\n\r\n  Module['inspect'] = function () { return '[Emscripten Module object]'; };\r\n} else\r\nif (ENVIRONMENT_IS_SHELL) {\r\n\r\n\r\n  if (typeof read != 'undefined') {\r\n    Module['read'] = function shell_read(f) {\r\n      return read(f);\r\n    };\r\n  }\r\n\r\n  Module['readBinary'] = function readBinary(f) {\r\n    var data;\r\n    if (typeof readbuffer === 'function') {\r\n      return new Uint8Array(readbuffer(f));\r\n    }\r\n    data = read(f, 'binary');\r\n    assert(typeof data === 'object');\r\n    return data;\r\n  };\r\n\r\n  if (typeof scriptArgs != 'undefined') {\r\n    Module['arguments'] = scriptArgs;\r\n  } else if (typeof arguments != 'undefined') {\r\n    Module['arguments'] = arguments;\r\n  }\r\n\r\n  if (typeof quit === 'function') {\r\n    Module['quit'] = function(status) {\r\n      quit(status);\r\n    }\r\n  }\r\n} else\r\nif (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {\r\n  if (ENVIRONMENT_IS_WEB) {\r\n    if (document.currentScript) {\r\n      scriptDirectory = document.currentScript.src;\r\n    }\r\n  } else { // worker\r\n    scriptDirectory = self.location.href;\r\n  }\r\n  // When MODULARIZE (and not _INSTANCE), this JS may be executed later, after document.currentScript\r\n  // is gone, so we saved it, and we use it here instead of any other info.\r\n  if (_scriptDir) {\r\n    scriptDirectory = _scriptDir;\r\n  }\r\n  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.\r\n  // otherwise, slice off the final part of the url to find the script directory.\r\n  if (scriptDirectory.indexOf('blob:') !== 0) {\r\n    scriptDirectory = scriptDirectory.split('/').slice(0, -1).join('/') + '/';\r\n  } else {\r\n    scriptDirectory = '';\r\n  }\r\n\r\n\r\n  Module['read'] = function shell_read(url) {\r\n      var xhr = new XMLHttpRequest();\r\n      xhr.open('GET', url, false);\r\n      xhr.send(null);\r\n      return xhr.responseText;\r\n  };\r\n\r\n  if (ENVIRONMENT_IS_WORKER) {\r\n    Module['readBinary'] = function readBinary(url) {\r\n        var xhr = new XMLHttpRequest();\r\n        xhr.open('GET', url, false);\r\n        xhr.responseType = 'arraybuffer';\r\n        xhr.send(null);\r\n        return new Uint8Array(xhr.response);\r\n    };\r\n  }\r\n\r\n  Module['readAsync'] = function readAsync(url, onload, onerror) {\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.open('GET', url, true);\r\n    xhr.responseType = 'arraybuffer';\r\n    xhr.onload = function xhr_onload() {\r\n      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0\r\n        onload(xhr.response);\r\n        return;\r\n      }\r\n      onerror();\r\n    };\r\n    xhr.onerror = onerror;\r\n    xhr.send(null);\r\n  };\r\n\r\n  Module['setWindowTitle'] = function(title) { document.title = title };\r\n} else\r\n{\r\n}\r\n\r\n// Set up the out() and err() hooks, which are how we can print to stdout or\r\n// stderr, respectively.\r\n// If the user provided Module.print or printErr, use that. Otherwise,\r\n// console.log is checked first, as 'print' on the web will open a print dialogue\r\n// printErr is preferable to console.warn (works better in shells)\r\n// bind(console) is necessary to fix IE/Edge closed dev tools panel behavior.\r\nvar out = Module['print'] || (typeof console !== 'undefined' ? console.log.bind(console) : (typeof print !== 'undefined' ? print : null));\r\nvar err = Module['printErr'] || (typeof printErr !== 'undefined' ? printErr : ((typeof console !== 'undefined' && console.warn.bind(console)) || out));\r\n\r\n// *** Environment setup code ***\r\n\r\n// Merge back in the overrides\r\nfor (key in moduleOverrides) {\r\n  if (moduleOverrides.hasOwnProperty(key)) {\r\n    Module[key] = moduleOverrides[key];\r\n  }\r\n}\r\n// Free the object hierarchy contained in the overrides, this lets the GC\r\n// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.\r\nmoduleOverrides = undefined;\r\n\r\n\r\n\r\n// {{PREAMBLE_ADDITIONS}}\r\n\r\nvar STACK_ALIGN = 16;\r\n\r\n\r\nfunction staticAlloc(size) {\r\n  var ret = STATICTOP;\r\n  STATICTOP = (STATICTOP + size + 15) & -16;\r\n  return ret;\r\n}\r\n\r\nfunction dynamicAlloc(size) {\r\n  var ret = HEAP32[DYNAMICTOP_PTR>>2];\r\n  var end = (ret + size + 15) & -16;\r\n  HEAP32[DYNAMICTOP_PTR>>2] = end;\r\n  if (end >= TOTAL_MEMORY) {\r\n    var success = enlargeMemory();\r\n    if (!success) {\r\n      HEAP32[DYNAMICTOP_PTR>>2] = ret;\r\n      return 0;\r\n    }\r\n  }\r\n  return ret;\r\n}\r\n\r\nfunction alignMemory(size, factor) {\r\n  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default\r\n  var ret = size = Math.ceil(size / factor) * factor;\r\n  return ret;\r\n}\r\n\r\nfunction getNativeTypeSize(type) {\r\n  switch (type) {\r\n    case 'i1': case 'i8': return 1;\r\n    case 'i16': return 2;\r\n    case 'i32': return 4;\r\n    case 'i64': return 8;\r\n    case 'float': return 4;\r\n    case 'double': return 8;\r\n    default: {\r\n      if (type[type.length-1] === '*') {\r\n        return 4; // A pointer\r\n      } else if (type[0] === 'i') {\r\n        var bits = parseInt(type.substr(1));\r\n        assert(bits % 8 === 0);\r\n        return bits / 8;\r\n      } else {\r\n        return 0;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction warnOnce(text) {\r\n  if (!warnOnce.shown) warnOnce.shown = {};\r\n  if (!warnOnce.shown[text]) {\r\n    warnOnce.shown[text] = 1;\r\n    err(text);\r\n  }\r\n}\r\n\r\nvar asm2wasmImports = { // special asm2wasm imports\r\n    \"f64-rem\": function(x, y) {\r\n        return x % y;\r\n    },\r\n    \"debugger\": function() {\r\n        debugger;\r\n    }\r\n};\r\n\r\n\r\n\r\nvar jsCallStartIndex = 1;\r\nvar functionPointers = new Array(0);\r\n\r\n// 'sig' parameter is only used on LLVM wasm backend\r\nfunction addFunction(func, sig) {\r\n  var base = 0;\r\n  for (var i = base; i < base + 0; i++) {\r\n    if (!functionPointers[i]) {\r\n      functionPointers[i] = func;\r\n      return jsCallStartIndex + i;\r\n    }\r\n  }\r\n  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';\r\n}\r\n\r\nfunction removeFunction(index) {\r\n  functionPointers[index-jsCallStartIndex] = null;\r\n}\r\n\r\nvar funcWrappers = {};\r\n\r\nfunction getFuncWrapper(func, sig) {\r\n  if (!func) return; // on null pointer, return undefined\r\n  assert(sig);\r\n  if (!funcWrappers[sig]) {\r\n    funcWrappers[sig] = {};\r\n  }\r\n  var sigCache = funcWrappers[sig];\r\n  if (!sigCache[func]) {\r\n    // optimize away arguments usage in common cases\r\n    if (sig.length === 1) {\r\n      sigCache[func] = function dynCall_wrapper() {\r\n        return dynCall(sig, func);\r\n      };\r\n    } else if (sig.length === 2) {\r\n      sigCache[func] = function dynCall_wrapper(arg) {\r\n        return dynCall(sig, func, [arg]);\r\n      };\r\n    } else {\r\n      // general case\r\n      sigCache[func] = function dynCall_wrapper() {\r\n        return dynCall(sig, func, Array.prototype.slice.call(arguments));\r\n      };\r\n    }\r\n  }\r\n  return sigCache[func];\r\n}\r\n\r\n\r\nfunction makeBigInt(low, high, unsigned) {\r\n  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));\r\n}\r\n\r\nfunction dynCall(sig, ptr, args) {\r\n  if (args && args.length) {\r\n    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));\r\n  } else {\r\n    return Module['dynCall_' + sig].call(null, ptr);\r\n  }\r\n}\r\n\r\n\r\n\r\nvar Runtime = {\r\n  // FIXME backwards compatibility layer for ports. Support some Runtime.*\r\n  //       for now, fix it there, then remove it from here. That way we\r\n  //       can minimize any period of breakage.\r\n  dynCall: dynCall, // for SDL2 port\r\n};\r\n\r\n// The address globals begin at. Very low in memory, for code size and optimization opportunities.\r\n// Above 0 is static memory, starting with globals.\r\n// Then the stack.\r\n// Then 'dynamic' memory for sbrk.\r\nvar GLOBAL_BASE = 1024;\r\n\r\n\r\n// === Preamble library stuff ===\r\n\r\n// Documentation for the public APIs defined in this file must be updated in:\r\n//    site/source/docs/api_reference/preamble.js.rst\r\n// A prebuilt local version of the documentation is available at:\r\n//    site/build/text/docs/api_reference/preamble.js.txt\r\n// You can also build docs locally as HTML or other formats in site/\r\n// An online HTML version (which may be of a different version of Emscripten)\r\n//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html\r\n\r\n\r\n\r\n//========================================\r\n// Runtime essentials\r\n//========================================\r\n\r\nvar ABORT = 0; // whether we are quitting the application. no code should run after this. set in exit() and abort()\r\nvar EXITSTATUS = 0;\r\n\r\n/** @type {function(*, string=)} */\r\nfunction assert(condition, text) {\r\n  if (!condition) {\r\n    abort('Assertion failed: ' + text);\r\n  }\r\n}\r\n\r\nvar globalScope = this;\r\n\r\n// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)\r\nfunction getCFunc(ident) {\r\n  var func = Module['_' + ident]; // closure exported function\r\n  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');\r\n  return func;\r\n}\r\n\r\nvar JSfuncs = {\r\n  // Helpers for cwrap -- it can't refer to Runtime directly because it might\r\n  // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find\r\n  // out what the minified function name is.\r\n  'stackSave': function() {\r\n    stackSave()\r\n  },\r\n  'stackRestore': function() {\r\n    stackRestore()\r\n  },\r\n  // type conversion from js to c\r\n  'arrayToC' : function(arr) {\r\n    var ret = stackAlloc(arr.length);\r\n    writeArrayToMemory(arr, ret);\r\n    return ret;\r\n  },\r\n  'stringToC' : function(str) {\r\n    var ret = 0;\r\n    if (str !== null && str !== undefined && str !== 0) { // null string\r\n      // at most 4 bytes per UTF-8 code point, +1 for the trailing '\\0'\r\n      var len = (str.length << 2) + 1;\r\n      ret = stackAlloc(len);\r\n      stringToUTF8(str, ret, len);\r\n    }\r\n    return ret;\r\n  }\r\n};\r\n\r\n// For fast lookup of conversion functions\r\nvar toC = {\r\n  'string': JSfuncs['stringToC'], 'array': JSfuncs['arrayToC']\r\n};\r\n\r\n\r\n// C calling interface.\r\nfunction ccall(ident, returnType, argTypes, args, opts) {\r\n  function convertReturnValue(ret) {\r\n    if (returnType === 'string') return Pointer_stringify(ret);\r\n    if (returnType === 'boolean') return Boolean(ret);\r\n    return ret;\r\n  }\r\n\r\n  var func = getCFunc(ident);\r\n  var cArgs = [];\r\n  var stack = 0;\r\n  if (args) {\r\n    for (var i = 0; i < args.length; i++) {\r\n      var converter = toC[argTypes[i]];\r\n      if (converter) {\r\n        if (stack === 0) stack = stackSave();\r\n        cArgs[i] = converter(args[i]);\r\n      } else {\r\n        cArgs[i] = args[i];\r\n      }\r\n    }\r\n  }\r\n  var ret = func.apply(null, cArgs);\r\n  ret = convertReturnValue(ret);\r\n  if (stack !== 0) stackRestore(stack);\r\n  return ret;\r\n}\r\n\r\nfunction cwrap(ident, returnType, argTypes, opts) {\r\n  argTypes = argTypes || [];\r\n  // When the function takes numbers and returns a number, we can just return\r\n  // the original function\r\n  var numericArgs = argTypes.every(function(type){ return type === 'number'});\r\n  var numericRet = returnType !== 'string';\r\n  if (numericRet && numericArgs && !opts) {\r\n    return getCFunc(ident);\r\n  }\r\n  return function() {\r\n    return ccall(ident, returnType, argTypes, arguments, opts);\r\n  }\r\n}\r\n\r\n/** @type {function(number, number, string, boolean=)} */\r\nfunction setValue(ptr, value, type, noSafe) {\r\n  type = type || 'i8';\r\n  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit\r\n    switch(type) {\r\n      case 'i1': HEAP8[((ptr)>>0)]=value; break;\r\n      case 'i8': HEAP8[((ptr)>>0)]=value; break;\r\n      case 'i16': HEAP16[((ptr)>>1)]=value; break;\r\n      case 'i32': HEAP32[((ptr)>>2)]=value; break;\r\n      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;\r\n      case 'float': HEAPF32[((ptr)>>2)]=value; break;\r\n      case 'double': HEAPF64[((ptr)>>3)]=value; break;\r\n      default: abort('invalid type for setValue: ' + type);\r\n    }\r\n}\r\n\r\n/** @type {function(number, string, boolean=)} */\r\nfunction getValue(ptr, type, noSafe) {\r\n  type = type || 'i8';\r\n  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit\r\n    switch(type) {\r\n      case 'i1': return HEAP8[((ptr)>>0)];\r\n      case 'i8': return HEAP8[((ptr)>>0)];\r\n      case 'i16': return HEAP16[((ptr)>>1)];\r\n      case 'i32': return HEAP32[((ptr)>>2)];\r\n      case 'i64': return HEAP32[((ptr)>>2)];\r\n      case 'float': return HEAPF32[((ptr)>>2)];\r\n      case 'double': return HEAPF64[((ptr)>>3)];\r\n      default: abort('invalid type for getValue: ' + type);\r\n    }\r\n  return null;\r\n}\r\n\r\nvar ALLOC_NORMAL = 0; // Tries to use _malloc()\r\nvar ALLOC_STACK = 1; // Lives for the duration of the current function call\r\nvar ALLOC_STATIC = 2; // Cannot be freed\r\nvar ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk\r\nvar ALLOC_NONE = 4; // Do not allocate\r\n\r\n// allocate(): This is for internal use. You can use it yourself as well, but the interface\r\n//             is a little tricky (see docs right below). The reason is that it is optimized\r\n//             for multiple syntaxes to save space in generated code. So you should\r\n//             normally not use allocate(), and instead allocate memory using _malloc(),\r\n//             initialize it with setValue(), and so forth.\r\n// @slab: An array of data, or a number. If a number, then the size of the block to allocate,\r\n//        in *bytes* (note that this is sometimes confusing: the next parameter does not\r\n//        affect this!)\r\n// @types: Either an array of types, one for each byte (or 0 if no type at that position),\r\n//         or a single type which is used for the entire block. This only matters if there\r\n//         is initial data - if @slab is a number, then this does not matter at all and is\r\n//         ignored.\r\n// @allocator: How to allocate memory, see ALLOC_*\r\n/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */\r\nfunction allocate(slab, types, allocator, ptr) {\r\n  var zeroinit, size;\r\n  if (typeof slab === 'number') {\r\n    zeroinit = true;\r\n    size = slab;\r\n  } else {\r\n    zeroinit = false;\r\n    size = slab.length;\r\n  }\r\n\r\n  var singleType = typeof types === 'string' ? types : null;\r\n\r\n  var ret;\r\n  if (allocator == ALLOC_NONE) {\r\n    ret = ptr;\r\n  } else {\r\n    ret = [typeof _malloc === 'function' ? _malloc : staticAlloc, stackAlloc, staticAlloc, dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));\r\n  }\r\n\r\n  if (zeroinit) {\r\n    var stop;\r\n    ptr = ret;\r\n    assert((ret & 3) == 0);\r\n    stop = ret + (size & ~3);\r\n    for (; ptr < stop; ptr += 4) {\r\n      HEAP32[((ptr)>>2)]=0;\r\n    }\r\n    stop = ret + size;\r\n    while (ptr < stop) {\r\n      HEAP8[((ptr++)>>0)]=0;\r\n    }\r\n    return ret;\r\n  }\r\n\r\n  if (singleType === 'i8') {\r\n    if (slab.subarray || slab.slice) {\r\n      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);\r\n    } else {\r\n      HEAPU8.set(new Uint8Array(slab), ret);\r\n    }\r\n    return ret;\r\n  }\r\n\r\n  var i = 0, type, typeSize, previousType;\r\n  while (i < size) {\r\n    var curr = slab[i];\r\n\r\n    type = singleType || types[i];\r\n    if (type === 0) {\r\n      i++;\r\n      continue;\r\n    }\r\n\r\n    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later\r\n\r\n    setValue(ret+i, curr, type);\r\n\r\n    // no need to look up size unless type changes, so cache it\r\n    if (previousType !== type) {\r\n      typeSize = getNativeTypeSize(type);\r\n      previousType = type;\r\n    }\r\n    i += typeSize;\r\n  }\r\n\r\n  return ret;\r\n}\r\n\r\n// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready\r\nfunction getMemory(size) {\r\n  if (!staticSealed) return staticAlloc(size);\r\n  if (!runtimeInitialized) return dynamicAlloc(size);\r\n  return _malloc(size);\r\n}\r\n\r\n/** @type {function(number, number=)} */\r\nfunction Pointer_stringify(ptr, length) {\r\n  if (length === 0 || !ptr) return '';\r\n  // Find the length, and check for UTF while doing so\r\n  var hasUtf = 0;\r\n  var t;\r\n  var i = 0;\r\n  while (1) {\r\n    t = HEAPU8[(((ptr)+(i))>>0)];\r\n    hasUtf |= t;\r\n    if (t == 0 && !length) break;\r\n    i++;\r\n    if (length && i == length) break;\r\n  }\r\n  if (!length) length = i;\r\n\r\n  var ret = '';\r\n\r\n  if (hasUtf < 128) {\r\n    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack\r\n    var curr;\r\n    while (length > 0) {\r\n      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));\r\n      ret = ret ? ret + curr : curr;\r\n      ptr += MAX_CHUNK;\r\n      length -= MAX_CHUNK;\r\n    }\r\n    return ret;\r\n  }\r\n  return UTF8ToString(ptr);\r\n}\r\n\r\n// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns\r\n// a copy of that string as a Javascript String object.\r\n\r\nfunction AsciiToString(ptr) {\r\n  var str = '';\r\n  while (1) {\r\n    var ch = HEAP8[((ptr++)>>0)];\r\n    if (!ch) return str;\r\n    str += String.fromCharCode(ch);\r\n  }\r\n}\r\n\r\n// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',\r\n// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.\r\n\r\nfunction stringToAscii(str, outPtr) {\r\n  return writeAsciiToMemory(str, outPtr, false);\r\n}\r\n\r\n// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns\r\n// a copy of that string as a Javascript String object.\r\n\r\nvar UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;\r\nfunction UTF8ArrayToString(u8Array, idx) {\r\n  var endPtr = idx;\r\n  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.\r\n  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.\r\n  while (u8Array[endPtr]) ++endPtr;\r\n\r\n  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {\r\n    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));\r\n  } else {\r\n    var u0, u1, u2, u3, u4, u5;\r\n\r\n    var str = '';\r\n    while (1) {\r\n      // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629\r\n      u0 = u8Array[idx++];\r\n      if (!u0) return str;\r\n      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }\r\n      u1 = u8Array[idx++] & 63;\r\n      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }\r\n      u2 = u8Array[idx++] & 63;\r\n      if ((u0 & 0xF0) == 0xE0) {\r\n        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;\r\n      } else {\r\n        u3 = u8Array[idx++] & 63;\r\n        if ((u0 & 0xF8) == 0xF0) {\r\n          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\r\n        } else {\r\n          u4 = u8Array[idx++] & 63;\r\n          if ((u0 & 0xFC) == 0xF8) {\r\n            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\r\n          } else {\r\n            u5 = u8Array[idx++] & 63;\r\n            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\r\n          }\r\n        }\r\n      }\r\n      if (u0 < 0x10000) {\r\n        str += String.fromCharCode(u0);\r\n      } else {\r\n        var ch = u0 - 0x10000;\r\n        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns\r\n// a copy of that string as a Javascript String object.\r\n\r\nfunction UTF8ToString(ptr) {\r\n  return UTF8ArrayToString(HEAPU8,ptr);\r\n}\r\n\r\n// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',\r\n// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.\r\n// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.\r\n// Parameters:\r\n//   str: the Javascript string to copy.\r\n//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.\r\n//   outIdx: The starting offset in the array to begin the copying.\r\n//   maxBytesToWrite: The maximum number of bytes this function can write to the array.\r\n//                    This count should include the null terminator,\r\n//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.\r\n//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.\r\n// Returns the number of bytes written, EXCLUDING the null terminator.\r\n\r\nfunction stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {\r\n  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.\r\n    return 0;\r\n\r\n  var startIdx = outIdx;\r\n  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.\r\n  for (var i = 0; i < str.length; ++i) {\r\n    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.\r\n    // See http://unicode.org/faq/utf_bom.html#utf16-3\r\n    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629\r\n    var u = str.charCodeAt(i); // possibly a lead surrogate\r\n    if (u >= 0xD800 && u <= 0xDFFF) {\r\n      var u1 = str.charCodeAt(++i);\r\n      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);\r\n    }\r\n    if (u <= 0x7F) {\r\n      if (outIdx >= endIdx) break;\r\n      outU8Array[outIdx++] = u;\r\n    } else if (u <= 0x7FF) {\r\n      if (outIdx + 1 >= endIdx) break;\r\n      outU8Array[outIdx++] = 0xC0 | (u >> 6);\r\n      outU8Array[outIdx++] = 0x80 | (u & 63);\r\n    } else if (u <= 0xFFFF) {\r\n      if (outIdx + 2 >= endIdx) break;\r\n      outU8Array[outIdx++] = 0xE0 | (u >> 12);\r\n      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);\r\n      outU8Array[outIdx++] = 0x80 | (u & 63);\r\n    } else if (u <= 0x1FFFFF) {\r\n      if (outIdx + 3 >= endIdx) break;\r\n      outU8Array[outIdx++] = 0xF0 | (u >> 18);\r\n      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);\r\n      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);\r\n      outU8Array[outIdx++] = 0x80 | (u & 63);\r\n    } else if (u <= 0x3FFFFFF) {\r\n      if (outIdx + 4 >= endIdx) break;\r\n      outU8Array[outIdx++] = 0xF8 | (u >> 24);\r\n      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);\r\n      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);\r\n      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);\r\n      outU8Array[outIdx++] = 0x80 | (u & 63);\r\n    } else {\r\n      if (outIdx + 5 >= endIdx) break;\r\n      outU8Array[outIdx++] = 0xFC | (u >> 30);\r\n      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);\r\n      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);\r\n      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);\r\n      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);\r\n      outU8Array[outIdx++] = 0x80 | (u & 63);\r\n    }\r\n  }\r\n  // Null-terminate the pointer to the buffer.\r\n  outU8Array[outIdx] = 0;\r\n  return outIdx - startIdx;\r\n}\r\n\r\n// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',\r\n// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.\r\n// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.\r\n// Returns the number of bytes written, EXCLUDING the null terminator.\r\n\r\nfunction stringToUTF8(str, outPtr, maxBytesToWrite) {\r\n  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);\r\n}\r\n\r\n// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.\r\n\r\nfunction lengthBytesUTF8(str) {\r\n  var len = 0;\r\n  for (var i = 0; i < str.length; ++i) {\r\n    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.\r\n    // See http://unicode.org/faq/utf_bom.html#utf16-3\r\n    var u = str.charCodeAt(i); // possibly a lead surrogate\r\n    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\r\n    if (u <= 0x7F) {\r\n      ++len;\r\n    } else if (u <= 0x7FF) {\r\n      len += 2;\r\n    } else if (u <= 0xFFFF) {\r\n      len += 3;\r\n    } else if (u <= 0x1FFFFF) {\r\n      len += 4;\r\n    } else if (u <= 0x3FFFFFF) {\r\n      len += 5;\r\n    } else {\r\n      len += 6;\r\n    }\r\n  }\r\n  return len;\r\n}\r\n\r\n// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns\r\n// a copy of that string as a Javascript String object.\r\n\r\nvar UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;\r\nfunction UTF16ToString(ptr) {\r\n  var endPtr = ptr;\r\n  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.\r\n  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.\r\n  var idx = endPtr >> 1;\r\n  while (HEAP16[idx]) ++idx;\r\n  endPtr = idx << 1;\r\n\r\n  if (endPtr - ptr > 32 && UTF16Decoder) {\r\n    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));\r\n  } else {\r\n    var i = 0;\r\n\r\n    var str = '';\r\n    while (1) {\r\n      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];\r\n      if (codeUnit == 0) return str;\r\n      ++i;\r\n      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.\r\n      str += String.fromCharCode(codeUnit);\r\n    }\r\n  }\r\n}\r\n\r\n// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',\r\n// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.\r\n// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.\r\n// Parameters:\r\n//   str: the Javascript string to copy.\r\n//   outPtr: Byte address in Emscripten HEAP where to write the string to.\r\n//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null\r\n//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.\r\n//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.\r\n// Returns the number of bytes written, EXCLUDING the null terminator.\r\n\r\nfunction stringToUTF16(str, outPtr, maxBytesToWrite) {\r\n  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.\r\n  if (maxBytesToWrite === undefined) {\r\n    maxBytesToWrite = 0x7FFFFFFF;\r\n  }\r\n  if (maxBytesToWrite < 2) return 0;\r\n  maxBytesToWrite -= 2; // Null terminator.\r\n  var startPtr = outPtr;\r\n  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;\r\n  for (var i = 0; i < numCharsToWrite; ++i) {\r\n    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.\r\n    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate\r\n    HEAP16[((outPtr)>>1)]=codeUnit;\r\n    outPtr += 2;\r\n  }\r\n  // Null-terminate the pointer to the HEAP.\r\n  HEAP16[((outPtr)>>1)]=0;\r\n  return outPtr - startPtr;\r\n}\r\n\r\n// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.\r\n\r\nfunction lengthBytesUTF16(str) {\r\n  return str.length*2;\r\n}\r\n\r\nfunction UTF32ToString(ptr) {\r\n  var i = 0;\r\n\r\n  var str = '';\r\n  while (1) {\r\n    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];\r\n    if (utf32 == 0)\r\n      return str;\r\n    ++i;\r\n    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.\r\n    // See http://unicode.org/faq/utf_bom.html#utf16-3\r\n    if (utf32 >= 0x10000) {\r\n      var ch = utf32 - 0x10000;\r\n      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));\r\n    } else {\r\n      str += String.fromCharCode(utf32);\r\n    }\r\n  }\r\n}\r\n\r\n// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',\r\n// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.\r\n// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.\r\n// Parameters:\r\n//   str: the Javascript string to copy.\r\n//   outPtr: Byte address in Emscripten HEAP where to write the string to.\r\n//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null\r\n//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.\r\n//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.\r\n// Returns the number of bytes written, EXCLUDING the null terminator.\r\n\r\nfunction stringToUTF32(str, outPtr, maxBytesToWrite) {\r\n  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.\r\n  if (maxBytesToWrite === undefined) {\r\n    maxBytesToWrite = 0x7FFFFFFF;\r\n  }\r\n  if (maxBytesToWrite < 4) return 0;\r\n  var startPtr = outPtr;\r\n  var endPtr = startPtr + maxBytesToWrite - 4;\r\n  for (var i = 0; i < str.length; ++i) {\r\n    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.\r\n    // See http://unicode.org/faq/utf_bom.html#utf16-3\r\n    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate\r\n    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {\r\n      var trailSurrogate = str.charCodeAt(++i);\r\n      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);\r\n    }\r\n    HEAP32[((outPtr)>>2)]=codeUnit;\r\n    outPtr += 4;\r\n    if (outPtr + 4 > endPtr) break;\r\n  }\r\n  // Null-terminate the pointer to the HEAP.\r\n  HEAP32[((outPtr)>>2)]=0;\r\n  return outPtr - startPtr;\r\n}\r\n\r\n// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.\r\n\r\nfunction lengthBytesUTF32(str) {\r\n  var len = 0;\r\n  for (var i = 0; i < str.length; ++i) {\r\n    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.\r\n    // See http://unicode.org/faq/utf_bom.html#utf16-3\r\n    var codeUnit = str.charCodeAt(i);\r\n    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.\r\n    len += 4;\r\n  }\r\n\r\n  return len;\r\n}\r\n\r\n// Allocate heap space for a JS string, and write it there.\r\n// It is the responsibility of the caller to free() that memory.\r\nfunction allocateUTF8(str) {\r\n  var size = lengthBytesUTF8(str) + 1;\r\n  var ret = _malloc(size);\r\n  if (ret) stringToUTF8Array(str, HEAP8, ret, size);\r\n  return ret;\r\n}\r\n\r\n// Allocate stack space for a JS string, and write it there.\r\nfunction allocateUTF8OnStack(str) {\r\n  var size = lengthBytesUTF8(str) + 1;\r\n  var ret = stackAlloc(size);\r\n  stringToUTF8Array(str, HEAP8, ret, size);\r\n  return ret;\r\n}\r\n\r\nfunction demangle(func) {\r\n  return func;\r\n}\r\n\r\nfunction demangleAll(text) {\r\n  var regex =\r\n    /__Z[\\w\\d_]+/g;\r\n  return text.replace(regex,\r\n    function(x) {\r\n      var y = demangle(x);\r\n      return x === y ? x : (x + ' [' + y + ']');\r\n    });\r\n}\r\n\r\nfunction jsStackTrace() {\r\n  var err = new Error();\r\n  if (!err.stack) {\r\n    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,\r\n    // so try that as a special-case.\r\n    try {\r\n      throw new Error(0);\r\n    } catch(e) {\r\n      err = e;\r\n    }\r\n    if (!err.stack) {\r\n      return '(no stack trace available)';\r\n    }\r\n  }\r\n  return err.stack.toString();\r\n}\r\n\r\nfunction stackTrace() {\r\n  var js = jsStackTrace();\r\n  if (Module['extraStackTrace']) js += '\\n' + Module['extraStackTrace']();\r\n  return demangleAll(js);\r\n}\r\n\r\n// Memory management\r\n\r\nvar PAGE_SIZE = 16384;\r\nvar WASM_PAGE_SIZE = 65536;\r\nvar ASMJS_PAGE_SIZE = 16777216;\r\nvar MIN_TOTAL_MEMORY = 16777216;\r\n\r\nfunction alignUp(x, multiple) {\r\n  if (x % multiple > 0) {\r\n    x += multiple - (x % multiple);\r\n  }\r\n  return x;\r\n}\r\n\r\nvar HEAP,\r\n/** @type {ArrayBuffer} */\r\n  buffer,\r\n/** @type {Int8Array} */\r\n  HEAP8,\r\n/** @type {Uint8Array} */\r\n  HEAPU8,\r\n/** @type {Int16Array} */\r\n  HEAP16,\r\n/** @type {Uint16Array} */\r\n  HEAPU16,\r\n/** @type {Int32Array} */\r\n  HEAP32,\r\n/** @type {Uint32Array} */\r\n  HEAPU32,\r\n/** @type {Float32Array} */\r\n  HEAPF32,\r\n/** @type {Float64Array} */\r\n  HEAPF64;\r\n\r\nfunction updateGlobalBuffer(buf) {\r\n  Module['buffer'] = buffer = buf;\r\n}\r\n\r\nfunction updateGlobalBufferViews() {\r\n  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);\r\n  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);\r\n  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);\r\n  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);\r\n  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);\r\n  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);\r\n  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);\r\n  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);\r\n}\r\n\r\nvar STATIC_BASE, STATICTOP, staticSealed; // static area\r\nvar STACK_BASE, STACKTOP, STACK_MAX; // stack area\r\nvar DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk\r\n\r\n  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;\r\n  staticSealed = false;\r\n\r\n\r\n\r\n\r\nfunction abortOnCannotGrowMemory() {\r\n  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime, or (3) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');\r\n}\r\n\r\nif (!Module['reallocBuffer']) Module['reallocBuffer'] = function(size) {\r\n  var ret;\r\n  try {\r\n    if (ArrayBuffer.transfer) {\r\n      ret = ArrayBuffer.transfer(buffer, size);\r\n    } else {\r\n      var oldHEAP8 = HEAP8;\r\n      ret = new ArrayBuffer(size);\r\n      var temp = new Int8Array(ret);\r\n      temp.set(oldHEAP8);\r\n    }\r\n  } catch(e) {\r\n    return false;\r\n  }\r\n  var success = _emscripten_replace_memory(ret);\r\n  if (!success) return false;\r\n  return ret;\r\n};\r\n\r\nfunction enlargeMemory() {\r\n  // TOTAL_MEMORY is the current size of the actual array, and DYNAMICTOP is the new top.\r\n\r\n\r\n  var PAGE_MULTIPLE = Module[\"usingWasm\"] ? WASM_PAGE_SIZE : ASMJS_PAGE_SIZE; // In wasm, heap size must be a multiple of 64KB. In asm.js, they need to be multiples of 16MB.\r\n  var LIMIT = 2147483648 - PAGE_MULTIPLE; // We can do one page short of 2GB as theoretical maximum.\r\n\r\n  if (HEAP32[DYNAMICTOP_PTR>>2] > LIMIT) {\r\n    return false;\r\n  }\r\n\r\n  var OLD_TOTAL_MEMORY = TOTAL_MEMORY;\r\n  TOTAL_MEMORY = Math.max(TOTAL_MEMORY, MIN_TOTAL_MEMORY); // So the loop below will not be infinite, and minimum asm.js memory size is 16MB.\r\n\r\n  while (TOTAL_MEMORY < HEAP32[DYNAMICTOP_PTR>>2]) { // Keep incrementing the heap size as long as it's less than what is requested.\r\n    if (TOTAL_MEMORY <= 536870912) {\r\n      TOTAL_MEMORY = alignUp(2 * TOTAL_MEMORY, PAGE_MULTIPLE); // Simple heuristic: double until 1GB...\r\n    } else {\r\n      // ..., but after that, add smaller increments towards 2GB, which we cannot reach\r\n      TOTAL_MEMORY = Math.min(alignUp((3 * TOTAL_MEMORY + 2147483648) / 4, PAGE_MULTIPLE), LIMIT);\r\n    }\r\n  }\r\n\r\n\r\n  var replacement = Module['reallocBuffer'](TOTAL_MEMORY);\r\n  if (!replacement || replacement.byteLength != TOTAL_MEMORY) {\r\n    // restore the state to before this call, we failed\r\n    TOTAL_MEMORY = OLD_TOTAL_MEMORY;\r\n    return false;\r\n  }\r\n\r\n  // everything worked\r\n\r\n  updateGlobalBuffer(replacement);\r\n  updateGlobalBufferViews();\r\n\r\n\r\n\r\n  return true;\r\n}\r\n\r\nvar byteLength;\r\ntry {\r\n  byteLength = Function.prototype.call.bind(Object.getOwnPropertyDescriptor(ArrayBuffer.prototype, 'byteLength').get);\r\n  byteLength(new ArrayBuffer(4)); // can fail on older ie\r\n} catch(e) { // can fail on older node/v8\r\n  byteLength = function(buffer) { return buffer.byteLength; };\r\n}\r\n\r\nvar TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;\r\nvar TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 134217728;\r\nif (TOTAL_MEMORY < TOTAL_STACK) err('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');\r\n\r\n// Initialize the runtime's memory\r\n\r\n\r\n\r\n// Use a provided buffer, if there is one, or else allocate a new one\r\nif (Module['buffer']) {\r\n  buffer = Module['buffer'];\r\n} else {\r\n  // Use a WebAssembly memory where available\r\n  if (typeof WebAssembly === 'object' && typeof WebAssembly.Memory === 'function') {\r\n    Module['wasmMemory'] = new WebAssembly.Memory({ 'initial': TOTAL_MEMORY / WASM_PAGE_SIZE });\r\n    buffer = Module['wasmMemory'].buffer;\r\n  } else\r\n  {\r\n    buffer = new ArrayBuffer(TOTAL_MEMORY);\r\n  }\r\n  Module['buffer'] = buffer;\r\n}\r\nupdateGlobalBufferViews();\r\n\r\n\r\nfunction getTotalMemory() {\r\n  return TOTAL_MEMORY;\r\n}\r\n\r\n// Endianness check (note: assumes compiler arch was little-endian)\r\n\r\nfunction callRuntimeCallbacks(callbacks) {\r\n  while(callbacks.length > 0) {\r\n    var callback = callbacks.shift();\r\n    if (typeof callback == 'function') {\r\n      callback();\r\n      continue;\r\n    }\r\n    var func = callback.func;\r\n    if (typeof func === 'number') {\r\n      if (callback.arg === undefined) {\r\n        Module['dynCall_v'](func);\r\n      } else {\r\n        Module['dynCall_vi'](func, callback.arg);\r\n      }\r\n    } else {\r\n      func(callback.arg === undefined ? null : callback.arg);\r\n    }\r\n  }\r\n}\r\n\r\nvar __ATPRERUN__  = []; // functions called before the runtime is initialized\r\nvar __ATINIT__    = []; // functions called during startup\r\nvar __ATMAIN__    = []; // functions called when main() is to be run\r\nvar __ATEXIT__    = []; // functions called during shutdown\r\nvar __ATPOSTRUN__ = []; // functions called after the main() is called\r\n\r\nvar runtimeInitialized = false;\r\nvar runtimeExited = false;\r\n\r\n\r\nfunction preRun() {\r\n  // compatibility - merge in anything from Module['preRun'] at this time\r\n  if (Module['preRun']) {\r\n    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];\r\n    while (Module['preRun'].length) {\r\n      addOnPreRun(Module['preRun'].shift());\r\n    }\r\n  }\r\n  callRuntimeCallbacks(__ATPRERUN__);\r\n}\r\n\r\nfunction ensureInitRuntime() {\r\n  if (runtimeInitialized) return;\r\n  runtimeInitialized = true;\r\n  callRuntimeCallbacks(__ATINIT__);\r\n}\r\n\r\nfunction preMain() {\r\n  callRuntimeCallbacks(__ATMAIN__);\r\n}\r\n\r\nfunction exitRuntime() {\r\n  callRuntimeCallbacks(__ATEXIT__);\r\n  runtimeExited = true;\r\n}\r\n\r\nfunction postRun() {\r\n  // compatibility - merge in anything from Module['postRun'] at this time\r\n  if (Module['postRun']) {\r\n    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];\r\n    while (Module['postRun'].length) {\r\n      addOnPostRun(Module['postRun'].shift());\r\n    }\r\n  }\r\n  callRuntimeCallbacks(__ATPOSTRUN__);\r\n}\r\n\r\nfunction addOnPreRun(cb) {\r\n  __ATPRERUN__.unshift(cb);\r\n}\r\n\r\nfunction addOnInit(cb) {\r\n  __ATINIT__.unshift(cb);\r\n}\r\n\r\nfunction addOnPreMain(cb) {\r\n  __ATMAIN__.unshift(cb);\r\n}\r\n\r\nfunction addOnExit(cb) {\r\n  __ATEXIT__.unshift(cb);\r\n}\r\n\r\nfunction addOnPostRun(cb) {\r\n  __ATPOSTRUN__.unshift(cb);\r\n}\r\n\r\n// Deprecated: This function should not be called because it is unsafe and does not provide\r\n// a maximum length limit of how many bytes it is allowed to write. Prefer calling the\r\n// function stringToUTF8Array() instead, which takes in a maximum length that can be used\r\n// to be secure from out of bounds writes.\r\n/** @deprecated */\r\nfunction writeStringToMemory(string, buffer, dontAddNull) {\r\n  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');\r\n\r\n  var /** @type {number} */ lastChar, /** @type {number} */ end;\r\n  if (dontAddNull) {\r\n    // stringToUTF8Array always appends null. If we don't want to do that, remember the\r\n    // character that existed at the location where the null will be placed, and restore\r\n    // that after the write (below).\r\n    end = buffer + lengthBytesUTF8(string);\r\n    lastChar = HEAP8[end];\r\n  }\r\n  stringToUTF8(string, buffer, Infinity);\r\n  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.\r\n}\r\n\r\nfunction writeArrayToMemory(array, buffer) {\r\n  HEAP8.set(array, buffer);\r\n}\r\n\r\nfunction writeAsciiToMemory(str, buffer, dontAddNull) {\r\n  for (var i = 0; i < str.length; ++i) {\r\n    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);\r\n  }\r\n  // Null-terminate the pointer to the HEAP.\r\n  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;\r\n}\r\n\r\nfunction unSign(value, bits, ignore) {\r\n  if (value >= 0) {\r\n    return value;\r\n  }\r\n  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts\r\n                    : Math.pow(2, bits)         + value;\r\n}\r\nfunction reSign(value, bits, ignore) {\r\n  if (value <= 0) {\r\n    return value;\r\n  }\r\n  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32\r\n                        : Math.pow(2, bits-1);\r\n  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that\r\n                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors\r\n                                                       // TODO: In i64 mode 1, resign the two parts separately and safely\r\n    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts\r\n  }\r\n  return value;\r\n}\r\n\r\n\r\nvar Math_abs = Math.abs;\r\nvar Math_cos = Math.cos;\r\nvar Math_sin = Math.sin;\r\nvar Math_tan = Math.tan;\r\nvar Math_acos = Math.acos;\r\nvar Math_asin = Math.asin;\r\nvar Math_atan = Math.atan;\r\nvar Math_atan2 = Math.atan2;\r\nvar Math_exp = Math.exp;\r\nvar Math_log = Math.log;\r\nvar Math_sqrt = Math.sqrt;\r\nvar Math_ceil = Math.ceil;\r\nvar Math_floor = Math.floor;\r\nvar Math_pow = Math.pow;\r\nvar Math_imul = Math.imul;\r\nvar Math_fround = Math.fround;\r\nvar Math_round = Math.round;\r\nvar Math_min = Math.min;\r\nvar Math_max = Math.max;\r\nvar Math_clz32 = Math.clz32;\r\nvar Math_trunc = Math.trunc;\r\n\r\n// A counter of dependencies for calling run(). If we need to\r\n// do asynchronous work before running, increment this and\r\n// decrement it. Incrementing must happen in a place like\r\n// PRE_RUN_ADDITIONS (used by emcc to add file preloading).\r\n// Note that you can add dependencies in preRun, even though\r\n// it happens right before run - run will be postponed until\r\n// the dependencies are met.\r\nvar runDependencies = 0;\r\nvar runDependencyWatcher = null;\r\nvar dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled\r\n\r\nfunction getUniqueRunDependency(id) {\r\n  return id;\r\n}\r\n\r\nfunction addRunDependency(id) {\r\n  runDependencies++;\r\n  if (Module['monitorRunDependencies']) {\r\n    Module['monitorRunDependencies'](runDependencies);\r\n  }\r\n}\r\n\r\nfunction removeRunDependency(id) {\r\n  runDependencies--;\r\n  if (Module['monitorRunDependencies']) {\r\n    Module['monitorRunDependencies'](runDependencies);\r\n  }\r\n  if (runDependencies == 0) {\r\n    if (runDependencyWatcher !== null) {\r\n      clearInterval(runDependencyWatcher);\r\n      runDependencyWatcher = null;\r\n    }\r\n    if (dependenciesFulfilled) {\r\n      var callback = dependenciesFulfilled;\r\n      dependenciesFulfilled = null;\r\n      callback(); // can add another dependenciesFulfilled\r\n    }\r\n  }\r\n}\r\n\r\nModule[\"preloadedImages\"] = {}; // maps url to image data\r\nModule[\"preloadedAudios\"] = {}; // maps url to audio data\r\n\r\n\r\n\r\nvar memoryInitializer = null;\r\n\r\n\r\n\r\n\r\n\r\n\r\n// Prefix of data URIs emitted by SINGLE_FILE and related options.\r\nvar dataURIPrefix = 'data:application/octet-stream;base64,';\r\n\r\n// Indicates whether filename is a base64 data URI.\r\nfunction isDataURI(filename) {\r\n  return String.prototype.startsWith ?\r\n      filename.startsWith(dataURIPrefix) :\r\n      filename.indexOf(dataURIPrefix) === 0;\r\n}\r\n\r\n\r\n\r\n\r\nfunction integrateWasmJS() {\r\n  // wasm.js has several methods for creating the compiled code module here:\r\n  //  * 'native-wasm' : use native WebAssembly support in the browser\r\n  //  * 'interpret-s-expr': load s-expression code from a .wast and interpret\r\n  //  * 'interpret-binary': load binary wasm and interpret\r\n  //  * 'interpret-asm2wasm': load asm.js code, translate to wasm, and interpret\r\n  //  * 'asmjs': no wasm, just load the asm.js code and use that (good for testing)\r\n  // The method is set at compile time (BINARYEN_METHOD)\r\n  // The method can be a comma-separated list, in which case, we will try the\r\n  // options one by one. Some of them can fail gracefully, and then we can try\r\n  // the next.\r\n\r\n  // inputs\r\n\r\n  var method = 'native-wasm';\r\n\r\n  var wasmTextFile = 'MpqCmp.wast';\r\n  var wasmBinaryFile = 'MpqCmp.wasm';\r\n  var asmjsCodeFile = 'MpqCmp.temp.asm.js';\r\n\r\n  if (!isDataURI(wasmTextFile)) {\r\n    wasmTextFile = locateFile(wasmTextFile);\r\n  }\r\n  if (!isDataURI(wasmBinaryFile)) {\r\n    wasmBinaryFile = locateFile(wasmBinaryFile);\r\n  }\r\n  if (!isDataURI(asmjsCodeFile)) {\r\n    asmjsCodeFile = locateFile(asmjsCodeFile);\r\n  }\r\n\r\n  // utilities\r\n\r\n  var wasmPageSize = 64*1024;\r\n\r\n  var info = {\r\n    'global': null,\r\n    'env': null,\r\n    'asm2wasm': asm2wasmImports,\r\n    'parent': Module // Module inside wasm-js.cpp refers to wasm-js.cpp; this allows access to the outside program.\r\n  };\r\n\r\n  var exports = null;\r\n\r\n\r\n  function mergeMemory(newBuffer) {\r\n    // The wasm instance creates its memory. But static init code might have written to\r\n    // buffer already, including the mem init file, and we must copy it over in a proper merge.\r\n    // TODO: avoid this copy, by avoiding such static init writes\r\n    // TODO: in shorter term, just copy up to the last static init write\r\n    var oldBuffer = Module['buffer'];\r\n    if (newBuffer.byteLength < oldBuffer.byteLength) {\r\n      err('the new buffer in mergeMemory is smaller than the previous one. in native wasm, we should grow memory here');\r\n    }\r\n    var oldView = new Int8Array(oldBuffer);\r\n    var newView = new Int8Array(newBuffer);\r\n\r\n\r\n    newView.set(oldView);\r\n    updateGlobalBuffer(newBuffer);\r\n    updateGlobalBufferViews();\r\n  }\r\n\r\n  function fixImports(imports) {\r\n    return imports;\r\n  }\r\n\r\n  function getBinary() {\r\n    try {\r\n      if (Module['wasmBinary']) {\r\n        return new Uint8Array(Module['wasmBinary']);\r\n      }\r\n      if (Module['readBinary']) {\r\n        return Module['readBinary'](wasmBinaryFile);\r\n      } else {\r\n        throw \"both async and sync fetching of the wasm failed\";\r\n      }\r\n    }\r\n    catch (err) {\r\n      abort(err);\r\n    }\r\n  }\r\n\r\n  function getBinaryPromise() {\r\n    // if we don't have the binary yet, and have the Fetch api, use that\r\n    // in some environments, like Electron's render process, Fetch api may be present, but have a different context than expected, let's only use it on the Web\r\n    if (!Module['wasmBinary'] && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && typeof fetch === 'function') {\r\n      return fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function(response) {\r\n        if (!response['ok']) {\r\n          throw \"failed to load wasm binary file at '\" + wasmBinaryFile + \"'\";\r\n        }\r\n        return response['arrayBuffer']();\r\n      }).catch(function () {\r\n        return getBinary();\r\n      });\r\n    }\r\n    // Otherwise, getBinary should be able to get it synchronously\r\n    return new Promise(function(resolve, reject) {\r\n      resolve(getBinary());\r\n    });\r\n  }\r\n\r\n  // do-method functions\r\n\r\n\r\n  function doNativeWasm(global, env, providedBuffer) {\r\n    if (typeof WebAssembly !== 'object') {\r\n      err('no native wasm support detected');\r\n      return false;\r\n    }\r\n    // prepare memory import\r\n    if (!(Module['wasmMemory'] instanceof WebAssembly.Memory)) {\r\n      err('no native wasm Memory in use');\r\n      return false;\r\n    }\r\n    env['memory'] = Module['wasmMemory'];\r\n    // Load the wasm module and create an instance of using native support in the JS engine.\r\n    info['global'] = {\r\n      'NaN': NaN,\r\n      'Infinity': Infinity\r\n    };\r\n    info['global.Math'] = Math;\r\n    info['env'] = env;\r\n    // handle a generated wasm instance, receiving its exports and\r\n    // performing other necessary setup\r\n    function receiveInstance(instance, module) {\r\n      exports = instance.exports;\r\n      if (exports.memory) mergeMemory(exports.memory);\r\n      Module['asm'] = exports;\r\n      Module[\"usingWasm\"] = true;\r\n      removeRunDependency('wasm-instantiate');\r\n    }\r\n    addRunDependency('wasm-instantiate');\r\n\r\n    // User shell pages can write their own Module.instantiateWasm = function(imports, successCallback) callback\r\n    // to manually instantiate the Wasm module themselves. This allows pages to run the instantiation parallel\r\n    // to any other async startup actions they are performing.\r\n    if (Module['instantiateWasm']) {\r\n      try {\r\n        return Module['instantiateWasm'](info, receiveInstance);\r\n      } catch(e) {\r\n        err('Module.instantiateWasm callback failed with error: ' + e);\r\n        return false;\r\n      }\r\n    }\r\n\r\n    function receiveInstantiatedSource(output) {\r\n      // 'output' is a WebAssemblyInstantiatedSource object which has both the module and instance.\r\n      // receiveInstance() will swap in the exports (to Module.asm) so they can be called\r\n      receiveInstance(output['instance'], output['module']);\r\n    }\r\n    function instantiateArrayBuffer(receiver) {\r\n      getBinaryPromise().then(function(binary) {\r\n        return WebAssembly.instantiate(binary, info);\r\n      }).then(receiver).catch(function(reason) {\r\n        err('failed to asynchronously prepare wasm: ' + reason);\r\n        abort(reason);\r\n      });\r\n    }\r\n    // Prefer streaming instantiation if available.\r\n    if (!Module['wasmBinary'] &&\r\n        typeof WebAssembly.instantiateStreaming === 'function' &&\r\n        !isDataURI(wasmBinaryFile) &&\r\n        typeof fetch === 'function') {\r\n      WebAssembly.instantiateStreaming(fetch(wasmBinaryFile, { credentials: 'same-origin' }), info)\r\n        .then(receiveInstantiatedSource)\r\n        .catch(function(reason) {\r\n          // We expect the most common failure cause to be a bad MIME type for the binary,\r\n          // in which case falling back to ArrayBuffer instantiation should work.\r\n          err('wasm streaming compile failed: ' + reason);\r\n          err('falling back to ArrayBuffer instantiation');\r\n          instantiateArrayBuffer(receiveInstantiatedSource);\r\n        });\r\n    } else {\r\n      instantiateArrayBuffer(receiveInstantiatedSource);\r\n    }\r\n    return {}; // no exports yet; we'll fill them in later\r\n  }\r\n\r\n\r\n  // We may have a preloaded value in Module.asm, save it\r\n  Module['asmPreload'] = Module['asm'];\r\n\r\n  // Memory growth integration code\r\n\r\n  var asmjsReallocBuffer = Module['reallocBuffer'];\r\n\r\n  var wasmReallocBuffer = function(size) {\r\n    var PAGE_MULTIPLE = Module[\"usingWasm\"] ? WASM_PAGE_SIZE : ASMJS_PAGE_SIZE; // In wasm, heap size must be a multiple of 64KB. In asm.js, they need to be multiples of 16MB.\r\n    size = alignUp(size, PAGE_MULTIPLE); // round up to wasm page size\r\n    var old = Module['buffer'];\r\n    var oldSize = old.byteLength;\r\n    if (Module[\"usingWasm\"]) {\r\n      // native wasm support\r\n      try {\r\n        var result = Module['wasmMemory'].grow((size - oldSize) / wasmPageSize); // .grow() takes a delta compared to the previous size\r\n        if (result !== (-1 | 0)) {\r\n          // success in native wasm memory growth, get the buffer from the memory\r\n          return Module['buffer'] = Module['wasmMemory'].buffer;\r\n        } else {\r\n          return null;\r\n        }\r\n      } catch(e) {\r\n        return null;\r\n      }\r\n    }\r\n  };\r\n\r\n  Module['reallocBuffer'] = function(size) {\r\n    if (finalMethod === 'asmjs') {\r\n      return asmjsReallocBuffer(size);\r\n    } else {\r\n      return wasmReallocBuffer(size);\r\n    }\r\n  };\r\n\r\n  // we may try more than one; this is the final one, that worked and we are using\r\n  var finalMethod = '';\r\n\r\n  // Provide an \"asm.js function\" for the application, called to \"link\" the asm.js module. We instantiate\r\n  // the wasm module at that time, and it receives imports and provides exports and so forth, the app\r\n  // doesn't need to care that it is wasm or olyfilled wasm or asm.js.\r\n\r\n  Module['asm'] = function(global, env, providedBuffer) {\r\n    env = fixImports(env);\r\n\r\n    // import table\r\n    if (!env['table']) {\r\n      var TABLE_SIZE = Module['wasmTableSize'];\r\n      if (TABLE_SIZE === undefined) TABLE_SIZE = 1024; // works in binaryen interpreter at least\r\n      var MAX_TABLE_SIZE = Module['wasmMaxTableSize'];\r\n      if (typeof WebAssembly === 'object' && typeof WebAssembly.Table === 'function') {\r\n        if (MAX_TABLE_SIZE !== undefined) {\r\n          env['table'] = new WebAssembly.Table({ 'initial': TABLE_SIZE, 'maximum': MAX_TABLE_SIZE, 'element': 'anyfunc' });\r\n        } else {\r\n          env['table'] = new WebAssembly.Table({ 'initial': TABLE_SIZE, element: 'anyfunc' });\r\n        }\r\n      } else {\r\n        env['table'] = new Array(TABLE_SIZE); // works in binaryen interpreter at least\r\n      }\r\n      Module['wasmTable'] = env['table'];\r\n    }\r\n\r\n    if (!env['memoryBase']) {\r\n      env['memoryBase'] = Module['STATIC_BASE']; // tell the memory segments where to place themselves\r\n    }\r\n    if (!env['tableBase']) {\r\n      env['tableBase'] = 0; // table starts at 0 by default, in dynamic linking this will change\r\n    }\r\n\r\n    // try the methods. each should return the exports if it succeeded\r\n\r\n    var exports;\r\n    exports = doNativeWasm(global, env, providedBuffer);\r\n\r\n    assert(exports, 'no binaryen method succeeded.');\r\n\r\n\r\n    return exports;\r\n  };\r\n\r\n  var methodHandler = Module['asm']; // note our method handler, as we may modify Module['asm'] later\r\n}\r\n\r\nintegrateWasmJS();\r\n\r\n// === Body ===\r\n\r\nvar ASM_CONSTS = [];\r\n\r\nfunction _do_error(err){ var end = HEAPU8.indexOf(0, err); var text = String.fromCharCode.apply(null, HEAPU8.subarray(err, end)); self.DApi.exit_error(text); }\r\nfunction _do_progress(done,total){ self.DApi.progress(done, total); }\r\nfunction _get_file_contents(ptr,offset,size){ self.DApi.get_file_contents(HEAPU8.subarray(ptr, ptr + size), offset); }\r\nfunction _put_file_contents(ptr,offset,size){ self.DApi.put_file_contents(HEAPU8.subarray(ptr, ptr + size), offset); }\r\nfunction _put_file_size(size){ self.DApi.put_file_size(size); }\r\n\r\n\r\n\r\nSTATIC_BASE = GLOBAL_BASE;\r\n\r\nSTATICTOP = STATIC_BASE + 28880;\r\n/* global initializers */  __ATINIT__.push();\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nvar STATIC_BUMP = 28880;\r\nModule[\"STATIC_BASE\"] = STATIC_BASE;\r\nModule[\"STATIC_BUMP\"] = STATIC_BUMP;\r\n\r\n/* no memory initializer */\r\nvar tempDoublePtr = STATICTOP; STATICTOP += 16;\r\n\r\nfunction copyTempFloat(ptr) { // functions, because inlining this code increases code size too much\r\n\r\n  HEAP8[tempDoublePtr] = HEAP8[ptr];\r\n\r\n  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];\r\n\r\n  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];\r\n\r\n  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];\r\n\r\n}\r\n\r\nfunction copyTempDouble(ptr) {\r\n\r\n  HEAP8[tempDoublePtr] = HEAP8[ptr];\r\n\r\n  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];\r\n\r\n  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];\r\n\r\n  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];\r\n\r\n  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];\r\n\r\n  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];\r\n\r\n  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];\r\n\r\n  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];\r\n\r\n}\r\n\r\n// {{PRE_LIBRARY}}\r\n\r\n\r\n  function ___assert_fail(condition, filename, line, func) {\r\n      abort('Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function']);\r\n    }\r\n\r\n  function ___cxa_allocate_exception(size) {\r\n      return _malloc(size);\r\n    }\r\n\r\n  function ___cxa_find_matching_catch_2() {\r\n          return ___cxa_find_matching_catch.apply(null, arguments);\r\n        }\r\n\r\n  function ___cxa_free_exception(ptr) {\r\n      try {\r\n        return _free(ptr);\r\n      } catch(e) { // XXX FIXME\r\n      }\r\n    }\r\n\r\n  \r\n  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()\r\n      return !!__ZSt18uncaught_exceptionv.uncaught_exception;\r\n    }\r\n  \r\n  \r\n  \r\n  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {\r\n        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;\r\n        for (var key in EXCEPTIONS.infos) {\r\n          var ptr = +key; // the iteration key is a string, and if we throw this, it must be an integer as that is what we look for\r\n          var info = EXCEPTIONS.infos[ptr];\r\n          if (info.adjusted === adjusted) {\r\n            return ptr;\r\n          }\r\n        }\r\n        return adjusted;\r\n      },addRef:function (ptr) {\r\n        if (!ptr) return;\r\n        var info = EXCEPTIONS.infos[ptr];\r\n        info.refcount++;\r\n      },decRef:function (ptr) {\r\n        if (!ptr) return;\r\n        var info = EXCEPTIONS.infos[ptr];\r\n        assert(info.refcount > 0);\r\n        info.refcount--;\r\n        // A rethrown exception can reach refcount 0; it must not be discarded\r\n        // Its next handler will clear the rethrown flag and addRef it, prior to\r\n        // final decRef and destruction here\r\n        if (info.refcount === 0 && !info.rethrown) {\r\n          if (info.destructor) {\r\n            Module['dynCall_vi'](info.destructor, ptr);\r\n          }\r\n          delete EXCEPTIONS.infos[ptr];\r\n          ___cxa_free_exception(ptr);\r\n        }\r\n      },clearRef:function (ptr) {\r\n        if (!ptr) return;\r\n        var info = EXCEPTIONS.infos[ptr];\r\n        info.refcount = 0;\r\n      }};\r\n  function ___resumeException(ptr) {\r\n      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }\r\n      throw ptr;\r\n    }function ___cxa_find_matching_catch() {\r\n      var thrown = EXCEPTIONS.last;\r\n      if (!thrown) {\r\n        // just pass through the null ptr\r\n        return ((setTempRet0(0),0)|0);\r\n      }\r\n      var info = EXCEPTIONS.infos[thrown];\r\n      var throwntype = info.type;\r\n      if (!throwntype) {\r\n        // just pass through the thrown ptr\r\n        return ((setTempRet0(0),thrown)|0);\r\n      }\r\n      var typeArray = Array.prototype.slice.call(arguments);\r\n  \r\n      var pointer = Module['___cxa_is_pointer_type'](throwntype);\r\n      // can_catch receives a **, add indirection\r\n      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);\r\n      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;\r\n      thrown = ___cxa_find_matching_catch.buffer;\r\n      // The different catch blocks are denoted by different types.\r\n      // Due to inheritance, those types may not precisely match the\r\n      // type of the thrown object. Find one which matches, and\r\n      // return the type of the catch block which should be called.\r\n      for (var i = 0; i < typeArray.length; i++) {\r\n        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {\r\n          thrown = HEAP32[((thrown)>>2)]; // undo indirection\r\n          info.adjusted = thrown;\r\n          return ((setTempRet0(typeArray[i]),thrown)|0);\r\n        }\r\n      }\r\n      // Shouldn't happen unless we have bogus data in typeArray\r\n      // or encounter a type for which emscripten doesn't have suitable\r\n      // typeinfo defined. Best-efforts match just in case.\r\n      thrown = HEAP32[((thrown)>>2)]; // undo indirection\r\n      return ((setTempRet0(throwntype),thrown)|0);\r\n    }function ___cxa_throw(ptr, type, destructor) {\r\n      EXCEPTIONS.infos[ptr] = {\r\n        ptr: ptr,\r\n        adjusted: ptr,\r\n        type: type,\r\n        destructor: destructor,\r\n        refcount: 0,\r\n        caught: false,\r\n        rethrown: false\r\n      };\r\n      EXCEPTIONS.last = ptr;\r\n      if (!(\"uncaught_exception\" in __ZSt18uncaught_exceptionv)) {\r\n        __ZSt18uncaught_exceptionv.uncaught_exception = 1;\r\n      } else {\r\n        __ZSt18uncaught_exceptionv.uncaught_exception++;\r\n      }\r\n      throw ptr;\r\n    }\r\n\r\n  function ___gxx_personality_v0() {\r\n    }\r\n\r\n\r\n  function _abort() {\r\n      Module['abort']();\r\n    }\r\n\r\n   \r\n\r\n  \r\n  function _llvm_exp2_f32(x) {\r\n      return Math.pow(2, x);\r\n    }function _llvm_exp2_f64() {\r\n  return _llvm_exp2_f32.apply(null, arguments)\r\n  }\r\n\r\n  \r\n  function _emscripten_memcpy_big(dest, src, num) {\r\n      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);\r\n      return dest;\r\n    } \r\n\r\n   \r\n\r\n  \r\n  function ___setErrNo(value) {\r\n      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;\r\n      return value;\r\n    } \r\nDYNAMICTOP_PTR = staticAlloc(4);\r\n\r\nSTACK_BASE = STACKTOP = alignMemory(STATICTOP);\r\n\r\nSTACK_MAX = STACK_BASE + TOTAL_STACK;\r\n\r\nDYNAMIC_BASE = alignMemory(STACK_MAX);\r\n\r\nHEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;\r\n\r\nstaticSealed = true; // seal the static portion of memory\r\n\r\nvar ASSERTIONS = false;\r\n\r\n/** @type {function(string, boolean=, number=)} */\r\nfunction intArrayFromString(stringy, dontAddNull, length) {\r\n  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;\r\n  var u8array = new Array(len);\r\n  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);\r\n  if (dontAddNull) u8array.length = numBytesWritten;\r\n  return u8array;\r\n}\r\n\r\nfunction intArrayToString(array) {\r\n  var ret = [];\r\n  for (var i = 0; i < array.length; i++) {\r\n    var chr = array[i];\r\n    if (chr > 0xFF) {\r\n      if (ASSERTIONS) {\r\n        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');\r\n      }\r\n      chr &= 0xFF;\r\n    }\r\n    ret.push(String.fromCharCode(chr));\r\n  }\r\n  return ret.join('');\r\n}\r\n\r\n\r\n\r\nModule['wasmTableSize'] = 163;\r\n\r\nModule['wasmMaxTableSize'] = 163;\r\n\r\nfunction invoke_ii(index,a1) {\r\n  var sp = stackSave();\r\n  try {\r\n    return Module[\"dynCall_ii\"](index,a1);\r\n  } catch(e) {\r\n    stackRestore(sp);\r\n    if (typeof e !== 'number' && e !== 'longjmp') throw e;\r\n    Module[\"setThrew\"](1, 0);\r\n  }\r\n}\r\n\r\nfunction invoke_iii(index,a1,a2) {\r\n  var sp = stackSave();\r\n  try {\r\n    return Module[\"dynCall_iii\"](index,a1,a2);\r\n  } catch(e) {\r\n    stackRestore(sp);\r\n    if (typeof e !== 'number' && e !== 'longjmp') throw e;\r\n    Module[\"setThrew\"](1, 0);\r\n  }\r\n}\r\n\r\nfunction invoke_iiii(index,a1,a2,a3) {\r\n  var sp = stackSave();\r\n  try {\r\n    return Module[\"dynCall_iiii\"](index,a1,a2,a3);\r\n  } catch(e) {\r\n    stackRestore(sp);\r\n    if (typeof e !== 'number' && e !== 'longjmp') throw e;\r\n    Module[\"setThrew\"](1, 0);\r\n  }\r\n}\r\n\r\nfunction invoke_iiiii(index,a1,a2,a3,a4) {\r\n  var sp = stackSave();\r\n  try {\r\n    return Module[\"dynCall_iiiii\"](index,a1,a2,a3,a4);\r\n  } catch(e) {\r\n    stackRestore(sp);\r\n    if (typeof e !== 'number' && e !== 'longjmp') throw e;\r\n    Module[\"setThrew\"](1, 0);\r\n  }\r\n}\r\n\r\nfunction invoke_iiiiii(index,a1,a2,a3,a4,a5) {\r\n  var sp = stackSave();\r\n  try {\r\n    return Module[\"dynCall_iiiiii\"](index,a1,a2,a3,a4,a5);\r\n  } catch(e) {\r\n    stackRestore(sp);\r\n    if (typeof e !== 'number' && e !== 'longjmp') throw e;\r\n    Module[\"setThrew\"](1, 0);\r\n  }\r\n}\r\n\r\nfunction invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6) {\r\n  var sp = stackSave();\r\n  try {\r\n    return Module[\"dynCall_iiiiiii\"](index,a1,a2,a3,a4,a5,a6);\r\n  } catch(e) {\r\n    stackRestore(sp);\r\n    if (typeof e !== 'number' && e !== 'longjmp') throw e;\r\n    Module[\"setThrew\"](1, 0);\r\n  }\r\n}\r\n\r\nfunction invoke_ji(index,a1) {\r\n  var sp = stackSave();\r\n  try {\r\n    return Module[\"dynCall_ji\"](index,a1);\r\n  } catch(e) {\r\n    stackRestore(sp);\r\n    if (typeof e !== 'number' && e !== 'longjmp') throw e;\r\n    Module[\"setThrew\"](1, 0);\r\n  }\r\n}\r\n\r\nfunction invoke_v(index) {\r\n  var sp = stackSave();\r\n  try {\r\n    Module[\"dynCall_v\"](index);\r\n  } catch(e) {\r\n    stackRestore(sp);\r\n    if (typeof e !== 'number' && e !== 'longjmp') throw e;\r\n    Module[\"setThrew\"](1, 0);\r\n  }\r\n}\r\n\r\nfunction invoke_vi(index,a1) {\r\n  var sp = stackSave();\r\n  try {\r\n    Module[\"dynCall_vi\"](index,a1);\r\n  } catch(e) {\r\n    stackRestore(sp);\r\n    if (typeof e !== 'number' && e !== 'longjmp') throw e;\r\n    Module[\"setThrew\"](1, 0);\r\n  }\r\n}\r\n\r\nfunction invoke_vii(index,a1,a2) {\r\n  var sp = stackSave();\r\n  try {\r\n    Module[\"dynCall_vii\"](index,a1,a2);\r\n  } catch(e) {\r\n    stackRestore(sp);\r\n    if (typeof e !== 'number' && e !== 'longjmp') throw e;\r\n    Module[\"setThrew\"](1, 0);\r\n  }\r\n}\r\n\r\nfunction invoke_viii(index,a1,a2,a3) {\r\n  var sp = stackSave();\r\n  try {\r\n    Module[\"dynCall_viii\"](index,a1,a2,a3);\r\n  } catch(e) {\r\n    stackRestore(sp);\r\n    if (typeof e !== 'number' && e !== 'longjmp') throw e;\r\n    Module[\"setThrew\"](1, 0);\r\n  }\r\n}\r\n\r\nfunction invoke_viiii(index,a1,a2,a3,a4) {\r\n  var sp = stackSave();\r\n  try {\r\n    Module[\"dynCall_viiii\"](index,a1,a2,a3,a4);\r\n  } catch(e) {\r\n    stackRestore(sp);\r\n    if (typeof e !== 'number' && e !== 'longjmp') throw e;\r\n    Module[\"setThrew\"](1, 0);\r\n  }\r\n}\r\n\r\nfunction invoke_viiiii(index,a1,a2,a3,a4,a5) {\r\n  var sp = stackSave();\r\n  try {\r\n    Module[\"dynCall_viiiii\"](index,a1,a2,a3,a4,a5);\r\n  } catch(e) {\r\n    stackRestore(sp);\r\n    if (typeof e !== 'number' && e !== 'longjmp') throw e;\r\n    Module[\"setThrew\"](1, 0);\r\n  }\r\n}\r\n\r\nfunction invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {\r\n  var sp = stackSave();\r\n  try {\r\n    Module[\"dynCall_viiiiii\"](index,a1,a2,a3,a4,a5,a6);\r\n  } catch(e) {\r\n    stackRestore(sp);\r\n    if (typeof e !== 'number' && e !== 'longjmp') throw e;\r\n    Module[\"setThrew\"](1, 0);\r\n  }\r\n}\r\n\r\nfunction invoke_viji(index,a1,a2,a3,a4) {\r\n  var sp = stackSave();\r\n  try {\r\n    Module[\"dynCall_viji\"](index,a1,a2,a3,a4);\r\n  } catch(e) {\r\n    stackRestore(sp);\r\n    if (typeof e !== 'number' && e !== 'longjmp') throw e;\r\n    Module[\"setThrew\"](1, 0);\r\n  }\r\n}\r\n\r\nModule.asmGlobalArg = {};\r\n\r\nModule.asmLibraryArg = { \"abort\": abort, \"assert\": assert, \"enlargeMemory\": enlargeMemory, \"getTotalMemory\": getTotalMemory, \"abortOnCannotGrowMemory\": abortOnCannotGrowMemory, \"invoke_ii\": invoke_ii, \"invoke_iii\": invoke_iii, \"invoke_iiii\": invoke_iiii, \"invoke_iiiii\": invoke_iiiii, \"invoke_iiiiii\": invoke_iiiiii, \"invoke_iiiiiii\": invoke_iiiiiii, \"invoke_ji\": invoke_ji, \"invoke_v\": invoke_v, \"invoke_vi\": invoke_vi, \"invoke_vii\": invoke_vii, \"invoke_viii\": invoke_viii, \"invoke_viiii\": invoke_viiii, \"invoke_viiiii\": invoke_viiiii, \"invoke_viiiiii\": invoke_viiiiii, \"invoke_viji\": invoke_viji, \"__ZSt18uncaught_exceptionv\": __ZSt18uncaught_exceptionv, \"___assert_fail\": ___assert_fail, \"___cxa_allocate_exception\": ___cxa_allocate_exception, \"___cxa_find_matching_catch\": ___cxa_find_matching_catch, \"___cxa_find_matching_catch_2\": ___cxa_find_matching_catch_2, \"___cxa_free_exception\": ___cxa_free_exception, \"___cxa_throw\": ___cxa_throw, \"___gxx_personality_v0\": ___gxx_personality_v0, \"___resumeException\": ___resumeException, \"___setErrNo\": ___setErrNo, \"_abort\": _abort, \"_do_error\": _do_error, \"_do_progress\": _do_progress, \"_emscripten_memcpy_big\": _emscripten_memcpy_big, \"_get_file_contents\": _get_file_contents, \"_llvm_exp2_f32\": _llvm_exp2_f32, \"_llvm_exp2_f64\": _llvm_exp2_f64, \"_put_file_contents\": _put_file_contents, \"_put_file_size\": _put_file_size, \"DYNAMICTOP_PTR\": DYNAMICTOP_PTR, \"tempDoublePtr\": tempDoublePtr, \"ABORT\": ABORT, \"STACKTOP\": STACKTOP, \"STACK_MAX\": STACK_MAX };\r\n// EMSCRIPTEN_START_ASM\r\nvar asm =Module[\"asm\"]// EMSCRIPTEN_END_ASM\r\n(Module.asmGlobalArg, Module.asmLibraryArg, buffer);\r\n\r\nModule[\"asm\"] = asm;\r\nvar _DApi_Alloc = Module[\"_DApi_Alloc\"] = function() {  return Module[\"asm\"][\"_DApi_Alloc\"].apply(null, arguments) };\r\nvar _DApi_Compress = Module[\"_DApi_Compress\"] = function() {  return Module[\"asm\"][\"_DApi_Compress\"].apply(null, arguments) };\r\nvar ___cxa_can_catch = Module[\"___cxa_can_catch\"] = function() {  return Module[\"asm\"][\"___cxa_can_catch\"].apply(null, arguments) };\r\nvar ___cxa_is_pointer_type = Module[\"___cxa_is_pointer_type\"] = function() {  return Module[\"asm\"][\"___cxa_is_pointer_type\"].apply(null, arguments) };\r\nvar ___em_js__do_error = Module[\"___em_js__do_error\"] = function() {  return Module[\"asm\"][\"___em_js__do_error\"].apply(null, arguments) };\r\nvar ___em_js__do_progress = Module[\"___em_js__do_progress\"] = function() {  return Module[\"asm\"][\"___em_js__do_progress\"].apply(null, arguments) };\r\nvar ___em_js__get_file_contents = Module[\"___em_js__get_file_contents\"] = function() {  return Module[\"asm\"][\"___em_js__get_file_contents\"].apply(null, arguments) };\r\nvar ___em_js__put_file_contents = Module[\"___em_js__put_file_contents\"] = function() {  return Module[\"asm\"][\"___em_js__put_file_contents\"].apply(null, arguments) };\r\nvar ___em_js__put_file_size = Module[\"___em_js__put_file_size\"] = function() {  return Module[\"asm\"][\"___em_js__put_file_size\"].apply(null, arguments) };\r\nvar _emscripten_replace_memory = Module[\"_emscripten_replace_memory\"] = function() {  return Module[\"asm\"][\"_emscripten_replace_memory\"].apply(null, arguments) };\r\nvar _free = Module[\"_free\"] = function() {  return Module[\"asm\"][\"_free\"].apply(null, arguments) };\r\nvar _llvm_bswap_i32 = Module[\"_llvm_bswap_i32\"] = function() {  return Module[\"asm\"][\"_llvm_bswap_i32\"].apply(null, arguments) };\r\nvar _malloc = Module[\"_malloc\"] = function() {  return Module[\"asm\"][\"_malloc\"].apply(null, arguments) };\r\nvar _memcpy = Module[\"_memcpy\"] = function() {  return Module[\"asm\"][\"_memcpy\"].apply(null, arguments) };\r\nvar _memset = Module[\"_memset\"] = function() {  return Module[\"asm\"][\"_memset\"].apply(null, arguments) };\r\nvar _sbrk = Module[\"_sbrk\"] = function() {  return Module[\"asm\"][\"_sbrk\"].apply(null, arguments) };\r\nvar establishStackSpace = Module[\"establishStackSpace\"] = function() {  return Module[\"asm\"][\"establishStackSpace\"].apply(null, arguments) };\r\nvar getTempRet0 = Module[\"getTempRet0\"] = function() {  return Module[\"asm\"][\"getTempRet0\"].apply(null, arguments) };\r\nvar runPostSets = Module[\"runPostSets\"] = function() {  return Module[\"asm\"][\"runPostSets\"].apply(null, arguments) };\r\nvar setTempRet0 = Module[\"setTempRet0\"] = function() {  return Module[\"asm\"][\"setTempRet0\"].apply(null, arguments) };\r\nvar setThrew = Module[\"setThrew\"] = function() {  return Module[\"asm\"][\"setThrew\"].apply(null, arguments) };\r\nvar stackAlloc = Module[\"stackAlloc\"] = function() {  return Module[\"asm\"][\"stackAlloc\"].apply(null, arguments) };\r\nvar stackRestore = Module[\"stackRestore\"] = function() {  return Module[\"asm\"][\"stackRestore\"].apply(null, arguments) };\r\nvar stackSave = Module[\"stackSave\"] = function() {  return Module[\"asm\"][\"stackSave\"].apply(null, arguments) };\r\nvar dynCall_ii = Module[\"dynCall_ii\"] = function() {  return Module[\"asm\"][\"dynCall_ii\"].apply(null, arguments) };\r\nvar dynCall_iii = Module[\"dynCall_iii\"] = function() {  return Module[\"asm\"][\"dynCall_iii\"].apply(null, arguments) };\r\nvar dynCall_iiii = Module[\"dynCall_iiii\"] = function() {  return Module[\"asm\"][\"dynCall_iiii\"].apply(null, arguments) };\r\nvar dynCall_iiiii = Module[\"dynCall_iiiii\"] = function() {  return Module[\"asm\"][\"dynCall_iiiii\"].apply(null, arguments) };\r\nvar dynCall_iiiiii = Module[\"dynCall_iiiiii\"] = function() {  return Module[\"asm\"][\"dynCall_iiiiii\"].apply(null, arguments) };\r\nvar dynCall_iiiiiii = Module[\"dynCall_iiiiiii\"] = function() {  return Module[\"asm\"][\"dynCall_iiiiiii\"].apply(null, arguments) };\r\nvar dynCall_ji = Module[\"dynCall_ji\"] = function() {  return Module[\"asm\"][\"dynCall_ji\"].apply(null, arguments) };\r\nvar dynCall_v = Module[\"dynCall_v\"] = function() {  return Module[\"asm\"][\"dynCall_v\"].apply(null, arguments) };\r\nvar dynCall_vi = Module[\"dynCall_vi\"] = function() {  return Module[\"asm\"][\"dynCall_vi\"].apply(null, arguments) };\r\nvar dynCall_vii = Module[\"dynCall_vii\"] = function() {  return Module[\"asm\"][\"dynCall_vii\"].apply(null, arguments) };\r\nvar dynCall_viii = Module[\"dynCall_viii\"] = function() {  return Module[\"asm\"][\"dynCall_viii\"].apply(null, arguments) };\r\nvar dynCall_viiii = Module[\"dynCall_viiii\"] = function() {  return Module[\"asm\"][\"dynCall_viiii\"].apply(null, arguments) };\r\nvar dynCall_viiiii = Module[\"dynCall_viiiii\"] = function() {  return Module[\"asm\"][\"dynCall_viiiii\"].apply(null, arguments) };\r\nvar dynCall_viiiiii = Module[\"dynCall_viiiiii\"] = function() {  return Module[\"asm\"][\"dynCall_viiiiii\"].apply(null, arguments) };\r\nvar dynCall_viji = Module[\"dynCall_viji\"] = function() {  return Module[\"asm\"][\"dynCall_viji\"].apply(null, arguments) };\r\n;\r\n\r\n\r\n\r\n// === Auto-generated postamble setup entry stuff ===\r\n\r\nModule['asm'] = asm;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// Modularize mode returns a function, which can be called to\r\n// create instances. The instances provide a then() method,\r\n// must like a Promise, that receives a callback. The callback\r\n// is called when the module is ready to run, with the module\r\n// as a parameter. (Like a Promise, it also returns the module\r\n// so you can use the output of .then(..)).\r\nModule['then'] = function(func) {\r\n  // We may already be ready to run code at this time. if\r\n  // so, just queue a call to the callback.\r\n  if (Module['calledRun']) {\r\n    func(Module);\r\n  } else {\r\n    // we are not ready to call then() yet. we must call it\r\n    // at the same time we would call onRuntimeInitialized.\r\n    var old = Module['onRuntimeInitialized'];\r\n    Module['onRuntimeInitialized'] = function() {\r\n      if (old) old();\r\n      func(Module);\r\n    };\r\n  }\r\n  return Module;\r\n};\r\n\r\n/**\r\n * @constructor\r\n * @extends {Error}\r\n * @this {ExitStatus}\r\n */\r\nfunction ExitStatus(status) {\r\n  this.name = \"ExitStatus\";\r\n  this.message = \"Program terminated with exit(\" + status + \")\";\r\n  this.status = status;\r\n};\r\nExitStatus.prototype = new Error();\r\nExitStatus.prototype.constructor = ExitStatus;\r\n\r\nvar initialStackTop;\r\nvar calledMain = false;\r\n\r\ndependenciesFulfilled = function runCaller() {\r\n  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)\r\n  if (!Module['calledRun']) run();\r\n  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/** @type {function(Array=)} */\r\nfunction run(args) {\r\n  args = args || Module['arguments'];\r\n\r\n  if (runDependencies > 0) {\r\n    return;\r\n  }\r\n\r\n\r\n  preRun();\r\n\r\n  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later\r\n  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame\r\n\r\n  function doRun() {\r\n    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening\r\n    Module['calledRun'] = true;\r\n\r\n    if (ABORT) return;\r\n\r\n    ensureInitRuntime();\r\n\r\n    preMain();\r\n\r\n    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();\r\n\r\n\r\n    postRun();\r\n  }\r\n\r\n  if (Module['setStatus']) {\r\n    Module['setStatus']('Running...');\r\n    setTimeout(function() {\r\n      setTimeout(function() {\r\n        Module['setStatus']('');\r\n      }, 1);\r\n      doRun();\r\n    }, 1);\r\n  } else {\r\n    doRun();\r\n  }\r\n}\r\nModule['run'] = run;\r\n\r\n\r\nfunction exit(status, implicit) {\r\n\r\n  // if this is just main exit-ing implicitly, and the status is 0, then we\r\n  // don't need to do anything here and can just leave. if the status is\r\n  // non-zero, though, then we need to report it.\r\n  // (we may have warned about this earlier, if a situation justifies doing so)\r\n  if (implicit && Module['noExitRuntime'] && status === 0) {\r\n    return;\r\n  }\r\n\r\n  if (Module['noExitRuntime']) {\r\n  } else {\r\n\r\n    ABORT = true;\r\n    EXITSTATUS = status;\r\n    STACKTOP = initialStackTop;\r\n\r\n    exitRuntime();\r\n\r\n    if (Module['onExit']) Module['onExit'](status);\r\n  }\r\n\r\n  Module['quit'](status, new ExitStatus(status));\r\n}\r\n\r\nvar abortDecorators = [];\r\n\r\nfunction abort(what) {\r\n  if (Module['onAbort']) {\r\n    Module['onAbort'](what);\r\n  }\r\n\r\n  if (what !== undefined) {\r\n    out(what);\r\n    err(what);\r\n    what = JSON.stringify(what)\r\n  } else {\r\n    what = '';\r\n  }\r\n\r\n  ABORT = true;\r\n  EXITSTATUS = 1;\r\n\r\n  throw 'abort(' + what + '). Build with -s ASSERTIONS=1 for more info.';\r\n}\r\nModule['abort'] = abort;\r\n\r\n// {{PRE_RUN_ADDITIONS}}\r\n\r\nif (Module['preInit']) {\r\n  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];\r\n  while (Module['preInit'].length > 0) {\r\n    Module['preInit'].pop()();\r\n  }\r\n}\r\n\r\n\r\nModule[\"noExitRuntime\"] = true;\r\n\r\nrun();\r\n\r\n// {{POST_RUN_ADDITIONS}}\r\n\r\n\r\n\r\n\r\n\r\n// {{MODULE_ADDITIONS}}\r\n\r\n\r\n\r\nModule['ready'] = new Promise(function (resolve, reject) {\r\n  delete Module['then']\r\n  Module['onAbort'] = function (what) {\r\n    reject(what)\r\n  }\r\n  addOnPostRun(function () {\r\n    resolve(Module)\r\n  })\r\n});\r\n\r\n\r\n\r\n  return MpqCmp;\r\n}\r\n);\r\n})();\r\nif (typeof exports === 'object' && typeof module === 'object')\r\n    module.exports = MpqCmp;\r\n  else if (typeof define === 'function' && define['amd'])\r\n    define([], function() { return MpqCmp; });\r\n  else if (typeof exports === 'object')\r\n    exports[\"MpqCmp\"] = MpqCmp;\r\n  \n\n/*** EXPORTS FROM exports-loader ***/\n","import MpqModule from './MpqCmp.jscc';\r\n\r\n/* eslint-disable-next-line no-restricted-globals */\r\nconst worker = self;\r\n\r\nlet input_file = null;\r\nlet input_offset = 0;\r\nlet output_file = null;\r\nlet last_progress = 0;\r\nfunction progress(value) {\r\n  worker.postMessage({action: \"progress\", value});\r\n}\r\n\r\nconst DApi = {\r\n  exit_error(error) {\r\n    throw Error(error);\r\n  },\r\n\r\n  get_file_contents(array, offset) {\r\n    array.set(input_file.subarray(offset - input_offset, offset - input_offset + array.byteLength));\r\n  },\r\n  put_file_size(size) {\r\n    output_file = new Uint8Array(size);\r\n  },\r\n  put_file_contents(array, offset) {\r\n    output_file.set(array, offset);\r\n  },\r\n\r\n  progress(done, total) {\r\n    if (done === total || performance.now() > last_progress + 100) {\r\n      progress(done);\r\n      last_progress = performance.now();\r\n    }\r\n  },\r\n};\r\n\r\nworker.DApi = DApi;\r\n\r\nasync function run({binary, mpq, input, offset, blockSize}) {\r\n  const wasm = await MpqModule({wasmBinary: binary}).ready;\r\n\r\n  input_file = new Uint8Array(mpq);\r\n  input_offset = offset;\r\n\r\n  const count = input.length / 6;\r\n  const ptr = wasm._DApi_Alloc(input.byteLength);\r\n  wasm.HEAPU32.set(input, ptr >> 2);\r\n\r\n  const dst = wasm._DApi_Compress(offset + input_file.length, blockSize, count, ptr) >> 2;\r\n\r\n  return [output_file.buffer, wasm.HEAPU32.slice(dst , dst + count * 4)];\r\n}\r\n\r\nworker.addEventListener(\"message\", ({data}) => {\r\n  switch (data.action) {\r\n  case \"run\":\r\n    run(data).then(\r\n      ([buffer, blocks]) => worker.postMessage({action: \"result\", buffer, blocks}, [buffer, blocks.buffer]),\r\n      err => worker.postMessage({action: \"error\", error: err.toString(), stack: err.stack}));\r\n    break;\r\n  default:\r\n  }\r\n});\r\n","// .dirname, .basename, and .extname methods are extracted from Node.js v8.11.1,\n// backported and transplited with Babel, with backwards-compat fixes\n\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n  return parts;\n}\n\n// path.resolve([from ...], to)\n// posix version\nexports.resolve = function () {\n  var resolvedPath = '',\n    resolvedAbsolute = false;\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = i >= 0 ? arguments[i] : process.cwd();\n\n    // Skip empty and invalid entries\n    if (typeof path !== 'string') {\n      throw new TypeError('Arguments to path.resolve must be strings');\n    } else if (!path) {\n      continue;\n    }\n    resolvedPath = path + '/' + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function (p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n  return (resolvedAbsolute ? '/' : '') + resolvedPath || '.';\n};\n\n// path.normalize(path)\n// posix version\nexports.normalize = function (path) {\n  var isAbsolute = exports.isAbsolute(path),\n    trailingSlash = substr(path, -1) === '/';\n\n  // Normalize the path\n  path = normalizeArray(filter(path.split('/'), function (p) {\n    return !!p;\n  }), !isAbsolute).join('/');\n  if (!path && !isAbsolute) {\n    path = '.';\n  }\n  if (path && trailingSlash) {\n    path += '/';\n  }\n  return (isAbsolute ? '/' : '') + path;\n};\n\n// posix version\nexports.isAbsolute = function (path) {\n  return path.charAt(0) === '/';\n};\n\n// posix version\nexports.join = function () {\n  var paths = Array.prototype.slice.call(arguments, 0);\n  return exports.normalize(filter(paths, function (p, index) {\n    if (typeof p !== 'string') {\n      throw new TypeError('Arguments to path.join must be strings');\n    }\n    return p;\n  }).join('/'));\n};\n\n// path.relative(from, to)\n// posix version\nexports.relative = function (from, to) {\n  from = exports.resolve(from).substr(1);\n  to = exports.resolve(to).substr(1);\n  function trim(arr) {\n    var start = 0;\n    for (; start < arr.length; start++) {\n      if (arr[start] !== '') break;\n    }\n    var end = arr.length - 1;\n    for (; end >= 0; end--) {\n      if (arr[end] !== '') break;\n    }\n    if (start > end) return [];\n    return arr.slice(start, end - start + 1);\n  }\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n  var outputParts = [];\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n  return outputParts.join('/');\n};\nexports.sep = '/';\nexports.delimiter = ':';\nexports.dirname = function (path) {\n  if (typeof path !== 'string') path = path + '';\n  if (path.length === 0) return '.';\n  var code = path.charCodeAt(0);\n  var hasRoot = code === 47 /*/*/;\n  var end = -1;\n  var matchedSlash = true;\n  for (var i = path.length - 1; i >= 1; --i) {\n    code = path.charCodeAt(i);\n    if (code === 47 /*/*/) {\n      if (!matchedSlash) {\n        end = i;\n        break;\n      }\n    } else {\n      // We saw the first non-path separator\n      matchedSlash = false;\n    }\n  }\n  if (end === -1) return hasRoot ? '/' : '.';\n  if (hasRoot && end === 1) {\n    // return '//';\n    // Backwards-compat fix:\n    return '/';\n  }\n  return path.slice(0, end);\n};\nfunction basename(path) {\n  if (typeof path !== 'string') path = path + '';\n  var start = 0;\n  var end = -1;\n  var matchedSlash = true;\n  var i;\n  for (i = path.length - 1; i >= 0; --i) {\n    if (path.charCodeAt(i) === 47 /*/*/) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now\n      if (!matchedSlash) {\n        start = i + 1;\n        break;\n      }\n    } else if (end === -1) {\n      // We saw the first non-path separator, mark this as the end of our\n      // path component\n      matchedSlash = false;\n      end = i + 1;\n    }\n  }\n  if (end === -1) return '';\n  return path.slice(start, end);\n}\n\n// Uses a mixed approach for backwards-compatibility, as ext behavior changed\n// in new Node.js versions, so only basename() above is backported here\nexports.basename = function (path, ext) {\n  var f = basename(path);\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n};\nexports.extname = function (path) {\n  if (typeof path !== 'string') path = path + '';\n  var startDot = -1;\n  var startPart = 0;\n  var end = -1;\n  var matchedSlash = true;\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find\n  var preDotState = 0;\n  for (var i = path.length - 1; i >= 0; --i) {\n    var code = path.charCodeAt(i);\n    if (code === 47 /*/*/) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now\n      if (!matchedSlash) {\n        startPart = i + 1;\n        break;\n      }\n      continue;\n    }\n    if (end === -1) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension\n      matchedSlash = false;\n      end = i + 1;\n    }\n    if (code === 46 /*.*/) {\n      // If this is our first dot, mark it as the start of our extension\n      if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;\n    } else if (startDot !== -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension\n      preDotState = -1;\n    }\n  }\n  if (startDot === -1 || end === -1 ||\n  // We saw a non-dot character immediately before the dot\n  preDotState === 0 ||\n  // The (right-most) trimmed path component is exactly '..'\n  preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n    return '';\n  }\n  return path.slice(startDot, end);\n};\nfunction filter(xs, f) {\n  if (xs.filter) return xs.filter(f);\n  var res = [];\n  for (var i = 0; i < xs.length; i++) {\n    if (f(xs[i], i, xs)) res.push(xs[i]);\n  }\n  return res;\n}\n\n// String.prototype.substr - negative index don't work in IE8\nvar substr = 'ab'.substr(-1) === 'b' ? function (str, start, len) {\n  return str.substr(start, len);\n} : function (str, start, len) {\n  if (start < 0) start = str.length + start;\n  return str.substr(start, len);\n};"],"sourceRoot":""}